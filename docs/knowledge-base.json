[
  {
    "package_name": "@decopro/ast",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Interface: `AstOptions`\n  - description?: string\n\n### Interface: `Ast`\n\n### Interface: `Visitor`\n\n### Function: `runAst(ast: Ast, visitor: Visitor<T, C>, ctx: C): Promise<T>`\n### Function: `runAstJson(json: unknown, visitor: Visitor<T, C>, ctx: C): Promise<T>`",
    "hash": "5d90b790e507efab4f967a4ab73b0ab9",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/ast",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/__tests__/cliAppInit.test.ts",
    "docs": "",
    "hash": "c0df6218c95838eeb2c55ee2ed0e0fb0",
    "category": "test",
    "tags": [
      "cli",
      "command",
      "test",
      "async",
      "class"
    ],
    "examples": [
      "// Test: should create instance with injector\nexpect(cliAppInit).toBeInstanceOf(CliAppInit);",
      "// Test: should add command types to commanders array\nclass TestCommand {}\n            const result = CliAppInit.forRoot([TestCommand]);\n            expect(result).toBe(CliAppInit);",
      "// Test: should initialize environment and register commands\nawait cliAppInit.onInit();\n\n            // Verify environment initialization\n            expect(mockInjector.get).toHaveBeenCalledWith(EnvService);\n            expect(mockEnvService.onInit).toHaveBeenCalled();\n\n            // Verify command registration\n            expect(mockInjector.getAll).toHaveBeenCalledWith(expect.any(Symbol));",
      "// Test: should handle empty command list\nmockInjector.getAll.mockReturnValue([]);\n\n            await cliAppInit.onInit();\n\n            expect(mockInjector.getAll).toHaveBeenCalled();"
    ],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/agents/index.ts",
    "docs": "",
    "hash": "d41d8cd98f00b204e9800998ecf8427e",
    "category": "module",
    "tags": [],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/bin.ts",
    "docs": "### Interface: `Decopro`\n  - tests?: string[]\n\n### Function: `main(): void`",
    "hash": "cf5d6cba6ece56bdc33b5881e697ec99",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/cliAppInit.ts",
    "docs": "### Interface: `CommandMetadata`\n\n命令元数据接口\n\n\n  - target: Type<any>\n  - options: CommanderOptions\n\n### Interface: `ArgumentMetadata`\n\n参数元数据接口\n\n\n  - target: Type<any>\n  - property: string | symbol\n  - options: ArgumentOptions\n\n### Interface: `OptionMetadata`\n\n选项元数据接口\n\n\n  - target: Type<any>\n  - property: string | symbol\n  - options: OptionOptions\n\n### Interface: `ActionMetadata`\n\n动作元数据接口\n\n\n  - target: Type<any>\n  - property: string | symbol\n  - options: ActionOptions\n\n### Class: `CliAppInit`\n\nCLI 应用初始化器\n负责注册和配置所有命令行命令\n\n\n  - Property: `commanders: Type<any>[]`\n  - Constructor: `constructor(injector: Injector): void`\n    - Parameter: `injector: Injector`\n  - Method: `forRoot(types: Type<any>[]): typeof CliAppInit`\n    \n    添加额外的命令类型\n    \n  - Method: `onInit(): Promise<void>`\n    \n    初始化 CLI 应用\n    \n  - Method: `initializeEnvironment(): Promise<void>`\n    \n    初始化环境服务\n    \n  - Method: `registerCommands(): Promise<void>`\n    \n    注册所有命令\n    \n  - Method: `registerSingleCommand(command: CommandMetadata): Promise<void>`\n    \n    注册单个命令\n    \n  - Method: `createCommand(command: CommandMetadata): Command`\n    \n    创建命令实例\n    \n  - Method: `addArguments(cmd: Command, command: CommandMetadata): void`\n    \n    为命令添加参数\n    \n  - Method: `addOptions(cmd: Command, command: CommandMetadata): void`\n    \n    为命令添加选项\n    \n  - Method: `addAction(cmd: Command, command: CommandMetadata): void`\n    \n    为命令添加动作处理器\n    \n  - Method: `executeCommand(command: CommandMetadata, args: any[]): Promise<void>`\n    \n    执行命令\n    \n  - Method: `getArgumentsForCommand(target: Type<any>): ArgumentMetadata[]`\n    \n    获取命令的参数元数据\n    \n  - Method: `getOptionsForCommand(target: Type<any>): OptionMetadata[]`\n    \n    获取命令的选项元数据\n    \n  - Method: `getActionsForCommand(target: Type<any>): ActionMetadata[]`\n    \n    获取命令的动作元数据\n    \n  - Method: `createArgument(arg: ArgumentMetadata): any`\n    \n    创建参数实例\n    \n  - Method: `createOption(opt: OptionMetadata): any`\n    \n    创建选项实例\n    \n  - Method: `setOptionsToInstance(instance: any, target: Type<any>, options: any): void`\n    \n    设置选项值到命令实例\n    \n  - Method: `setArgumentsToInstance(instance: any, target: Type<any>, args: any[]): void`\n    \n    设置参数值到命令实例\n    \n  - Method: `executeActions(instance: any, actions: ActionMetadata[], args: any[]): Promise<void>`\n    \n    执行命令的所有动作\n    \n  - Method: `parseArguments(): void`\n    \n    解析命令行参数\n    \n  - Method: `handleInitializationError(error: unknown): void`\n    \n    处理初始化错误\n    \n  - Method: `handleCommandRegistrationError(command: CommandMetadata, error: unknown): void`\n    \n    处理命令注册错误\n    \n  - Method: `handleCommandExecutionError(command: CommandMetadata, error: unknown): void`\n    \n    处理命令执行错误\n    \n",
    "hash": "3b8b4646575ea48bd67085eedec91509",
    "category": "interface",
    "tags": [
      "cli",
      "command",
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "commander",
      "@decopro/commander"
    ]
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "",
    "hash": "44a2bd20f0721b8dd5bc0748c4966665",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/mcpAppInit.ts",
    "docs": "### Class: `McpAppInit`\n  - Property: `tools: Type<any>[]`\n  - Property: `prompts: Type<any>[]`\n  - Constructor: `constructor(injector: Injector): void`\n    - Parameter: `injector: Injector`\n  - Method: `onInit(): Promise<void>`\n",
    "hash": "299f77ddf2a706bdda6970ff164305d6",
    "category": "class",
    "tags": [
      "async",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "@modelcontextprotocol/sdk/server/mcp.js"
    ]
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/mcpServerFactory.ts",
    "docs": "",
    "hash": "24e0d7b682d7b958006d4782e8822597",
    "category": "module",
    "tags": [
      "async",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "@modelcontextprotocol/sdk/server/mcp.js",
      "@decopro/mcp",
      "zod"
    ]
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/prompts/index.ts",
    "docs": "",
    "hash": "a680d558c808eb6c20125f54022f45f2",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/prompts/readPrompt.ts",
    "docs": "### Class: `ReadPrompt`\n  - Method: `read(): void`\n",
    "hash": "25b0b4cff3c62d5680d721a9e2620294",
    "category": "class",
    "tags": [
      "async",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "@decopro/mcp"
    ]
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/services/env.service.ts",
    "docs": "### Class: `EnvService`\n  - Property: `config: { token: string; refresh_token: string }`\n  - Constructor: `constructor(): void`\n  - Method: `onInit(): void`\n  - Method: `get(key: string): string | undefined`\n",
    "hash": "7d04abe7edd0eb42de4ef08d4c8617c7",
    "category": "class",
    "tags": [
      "async",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "os",
      "dotenv",
      "path",
      "fs-extra"
    ]
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/services/index.ts",
    "docs": "",
    "hash": "0025094419b9345a1f15ca995cc585ff",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "src/tools/index.ts",
    "docs": "",
    "hash": "d41d8cd98f00b204e9800998ecf8427e",
    "category": "module",
    "tags": [],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/cli",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/commander",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Interface: `OptionOptions`\n  - flags?: string\n  - description?: string\n  - zod?: ZodTypeAny\n\n### Function: `Option(): PropertyDecorator`\n\nOption 装饰器 - 支持可选参数\n\n\n### Function: `Option(options: OptionOptions): PropertyDecorator`\n\nOption 装饰器 - 支持可选参数\n\n\n### Function: `Option(options?: OptionOptions): PropertyDecorator`\n\nOption 装饰器 - 支持可选参数\n\n\n### Interface: `ActionOptions`\n  - description?: string\n\n### Function: `Action(): MethodDecorator`\n\nAction 装饰器 - 支持可选参数\n\n\n### Function: `Action(options: ActionOptions): MethodDecorator`\n\nAction 装饰器 - 支持可选参数\n\n\n### Function: `Action(options?: ActionOptions): MethodDecorator`\n\nAction 装饰器 - 支持可选参数\n\n\n### Interface: `ArgumentOptions`\n  - name?: string\n  - description?: string\n  - defaultValue?: unknown\n\n### Function: `Argument(): PropertyDecorator`\n\nArgument 装饰器 - 支持可选参数\n\n\n### Function: `Argument(options: ArgumentOptions): PropertyDecorator`\n\nArgument 装饰器 - 支持可选参数\n\n\n### Function: `Argument(options?: ArgumentOptions): PropertyDecorator`\n\nArgument 装饰器 - 支持可选参数\n\n\n### Interface: `CommanderOptions`\n  - name?: string\n  - alias?: string\n  - summary?: string\n  - description?: string\n\n### Function: `Commander(): ClassDecorator`\n\nCommander 装饰器 - 支持可选参数\n\n\n### Function: `Commander(options: CommanderOptions): ClassDecorator`\n\nCommander 装饰器 - 支持可选参数\n\n\n### Function: `Commander(options?: CommanderOptions): ClassDecorator`\n\nCommander 装饰器 - 支持可选参数\n\n",
    "hash": "9231bdb043ac516151a9600a70ef6eb3",
    "category": "interface",
    "tags": [
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "zod"
    ]
  },
  {
    "package_name": "@decopro/commander",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/DirectedGraph.ts",
    "docs": "### Class: `DirectedGraph`\n  - Property: `adjacencyList: Map<T, T[]>`\n  - Constructor: `constructor(): void`\n  - Method: `addVertex(vertex: T): void`\n  - Method: `addEdge(from: T, to: T): void`\n  - Method: `removeEdge(from: T, to: T): void`\n  - Method: `removeVertex(vertex: T): void`\n  - Method: `getVertices(): T[]`\n  - Method: `getNeighbors(vertex: T): T[]`\n  - Method: `dfs(start: T, callback: (vertex: T) => void): void`\n  - Method: `bfs(start: T, callback: (vertex: T) => void): void`\n  - Method: `topologicalSort(): T[] | null`\n  - Method: `hasCycle(): boolean`\n  - Method: `hasCycleDFS(): boolean`\n",
    "hash": "ab18ed26aa07fcd435d9675fc5c4afa6",
    "category": "class",
    "tags": [
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/LinkedList.ts",
    "docs": "### Class: `ListNode`\n  - Property: `value: T`\n  - Property: `next: ListNode<T> | null`\n  - Constructor: `constructor(value: T): void`\n    - Parameter: `value: T`\n\n### Class: `LinkedList`\n  - Property: `head: ListNode<T> | null`\n  - Property: `tail: ListNode<T> | null`\n  - Property: `_size: number`\n  - Constructor: `constructor(): void`\n  - Method: `append(value: T): void`\n  - Method: `prepend(value: T): void`\n  - Method: `insertAt(index: number, value: T): void`\n  - Method: `removeAt(index: number): T | null`\n  - Method: `remove(value: T): T | null`\n  - Method: `indexOf(value: T): number`\n  - Method: `size(): number`\n  - Method: `isEmpty(): boolean`\n  - Method: `toArray(): T[]`\n  - Method: `getNodeAt(index: number): ListNode<T> | null`\n",
    "hash": "e925b7d7482a414fe31c91325981d1c3",
    "category": "class",
    "tags": [
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/UndirectedGraph.ts",
    "docs": "### Class: `UndirectedGraph`\n  - Property: `adjacencyList: Map<T, T[]>`\n  - Constructor: `constructor(): void`\n  - Method: `addVertex(vertex: T): void`\n  - Method: `addEdge(vertex1: T, vertex2: T): void`\n  - Method: `removeEdge(vertex1: T, vertex2: T): void`\n  - Method: `removeVertex(vertex: T): void`\n  - Method: `getNeighbors(vertex: T): T[]`\n  - Method: `getVertices(): T[]`\n  - Method: `dfs(startVertex: T, callback?: (vertex: T) => void): T[]`\n  - Method: `bfs(startVertex: T, callback?: (vertex: T) => void): T[]`\n  - Method: `print(): string`\n",
    "hash": "eb0fbbbe4fc3b596e3bc78afba041f89",
    "category": "class",
    "tags": [
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/__tests__/bootstrap-deps.test.ts",
    "docs": "",
    "hash": "df4c325324c57b8b9eab8b723cbd7d35",
    "category": "test",
    "tags": [
      "test",
      "dependency-injection",
      "service",
      "async",
      "class"
    ],
    "examples": [
      "// Test: should properly inject deps into AppInit modules\nconst initOrder: string[] = [];\n\n        // 创建一个基础服务\n        @Injectable()\n        class DatabaseService {\n            connect() {\n                return \"database-connected\";\n            }\n        }\n\n        // 创建一个依赖于 DatabaseService 的模块\n        @AppInit({\n            deps: [DatabaseService]",
      "// Test: should handle complex dependency chains\nconst initOrder: string[] = [];\n\n        // 基础服务\n        @Injectable()\n        class ConfigService {\n            getConfig() {\n                return { env: \"test\" };\n            }\n        }\n\n        @Injectable()\n        class LoggerService {\n            log(message: string) {\n                return `[LOG] ${message}`;\n            }\n        }\n\n        // 第一层模块\n        @AppInit({\n            deps: [ConfigService]"
    ],
    "dependencies": [
      "tsyringe"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/__tests__/decorator-advanced.test.ts",
    "docs": "",
    "hash": "5d5551fd2cb0c7adf3292d88f7713022",
    "category": "test",
    "tags": [
      "test",
      "dependency-injection",
      "service",
      "async",
      "class"
    ],
    "examples": [
      "// Test: should support optional parameters\nclass TestClass {\n                @Input() // 无参数调用\n                simpleProperty: string = \"\";\n\n                @Input({ name: \"customName\" }) // 带参数调用\n                namedProperty: string = \"\";\n            }\n\n            expect(TestClass).toBeDefined();",
      "// Test: should support validated input\nclass TestClass {\n                @ValidatedInput({\n                    required: true,\n                    defaultValue: \"default\",\n                    min: 0,\n                    max: 100",
      "// Test: should support readonly input\nclass TestClass {\n                @ReadonlyInput({ name: \"readonlyProp\" })\n                readonlyProperty: string = \"readonly\";\n            }\n\n            expect(TestClass).toBeDefined();",
      "// Test: should support required input\nclass TestClass {\n                @RequiredInput({ defaultValue: \"required\" })\n                requiredProperty: string = \"\";\n            }\n\n            expect(TestClass).toBeDefined();",
      "// Test: should support optional parameters\n@Injectable() // 无参数调用\n            class SimpleService {}\n\n            @Injectable({ singleton: true }) // 带参数调用\n            class ConfiguredService {}\n\n            expect(SimpleService).toBeDefined();\n            expect(ConfiguredService).toBeDefined();",
      "// Test: should support singleton decorator\n@Singleton()\n            class SingletonService {}\n\n            @Singleton({ deps: [] })\n            class ConfiguredSingletonService {}\n\n            expect(SingletonService).toBeDefined();\n            expect(ConfiguredSingletonService).toBeDefined();",
      "// Test: should support transient decorator\n@Transient()\n            class TransientService {}\n\n            expect(TransientService).toBeDefined();",
      "// Test: should support conditional decorators\nconst shouldApply = true;\n\n            @conditional(shouldApply, Injectable())\n            class ConditionalService {}\n\n            expect(ConditionalService).toBeDefined();",
      "// Test: should support decorator composition\nconst combinedDecorator = compose(Injectable(), (target: any) => {\n                target.prototype.composed = true;\n                return target;",
      "// Test: should validate options correctly\nconst validator = validateOptions<{ min: number; max: number }>(\n                (options) => {\n                    return options.min <= options.max || \"Min must be <= Max\";",
      "// Test: should handle complex input validation\nclass UserModel {\n                @ValidatedInput({\n                    required: true,\n                    defaultValue: \"\",\n                    minLength: 2,\n                    maxLength: 50,\n                    pattern: /^[a-zA-Z\\s]+$/,\n                    validator: (value: string) => value.trim().length > 0",
      "// Test: should handle service with complex configuration\n@Singleton({\n                deps: [],\n                factory: () => new DatabaseService(\"production\")",
      "// Test: should handle AppInit with dependencies injection\n// 创建一个依赖服务\n            @Injectable()\n            class ConfigService {\n                getConfig() {\n                    return { database: \"test-db\" };\n                }\n            }\n\n            // 创建一个依赖于 ConfigService 的 AppInit 模块\n            @AppInit({\n                deps: [ConfigService]"
    ],
    "dependencies": []
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/__tests__/injector.test.ts",
    "docs": "",
    "hash": "d17996a51d2be05c255a5b372dc8033a",
    "category": "test",
    "tags": [
      "test",
      "async",
      "class",
      "function"
    ],
    "examples": [
      "// Test: should resolve dependencies\nconst service = injector.get(TestService);\n            expect(service).toBeInstanceOf(TestService);\n            expect(service.getValue()).toBe(\"test-value\");",
      "// Test: should check if token can be resolved\nexpect(injector.canResolve(TestService)).toBe(true);",
      "// Test: should return empty array for non-existent tokens\nconst NON_EXISTENT_TOKEN = Symbol(\"NON_EXISTENT\");\n            const result = injector.getAll(NON_EXISTENT_TOKEN);\n            expect(result).toEqual([]);",
      "// Test: should handle null and undefined values\nexpect(injector.toJson(null)).toBe(null);\n            expect(injector.toJson(undefined)).toBe(undefined);\n            expect(injector.toJson(\"string\")).toBe(\"string\");\n            expect(injector.toJson(123)).toBe(123);",
      "// Test: should handle arrays\nconst arr = [1, 2, 3];\n            expect(injector.toJson(arr)).toEqual([1, 2, 3]);",
      "// Test: should handle Date objects\nconst date = new Date(\"2023-01-01T00:00:00.000Z\");\n            expect(injector.toJson(date)).toBe(\"2023-01-01T00:00:00.000Z\");",
      "// Test: should handle basic types\nexpect(injector.fromJson(null)).toBe(null);\n            expect(injector.fromJson(undefined)).toBe(undefined);\n            expect(injector.fromJson(\"string\")).toBe(\"string\");\n            expect(injector.fromJson(123)).toBe(123);",
      "// Test: should handle arrays\nconst arr = [1, 2, 3];\n            expect(injector.fromJson(arr)).toEqual([1, 2, 3]);",
      "// Test: should cleanup objects with onDestroy method\nconst instance = new CleanupTest();\n            await injector.cleanup(instance);\n            expect(instance.cleaned).toBe(true);",
      "// Test: should handle objects without onDestroy method\nconst instance = { value: \"test\" };\n            await expect(injector.cleanup(instance)).resolves.toBeUndefined();"
    ],
    "dependencies": [
      "tsyringe"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/__tests__/setup.ts",
    "docs": "",
    "hash": "2a1927ddbb707243e7be3136126a4589",
    "category": "test",
    "tags": [
      "test"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/decorator.ts",
    "docs": "### Type Alias: `IPropertyDecorator = (target: any, propertyKey: any) => void`\n### Interface: `ClassMetadata`\n\n类元数据接口\n\n\n  - target: Type<any>\n  - options: O\n\n### Interface: `BaseDecoratorOptions`\n\n类装饰器选项的基础接口\n\n\n  - token?: InjectionToken<any> | InjectionToken<any>[]\n\n### Interface: `ClassDecoratorFactory`\n\n类装饰器工厂函数的重载类型\n\n\n\n### Function: `createClassDecorator(token: InjectionToken<ClassMetadata<O>>, defaultOptions?: Partial<O>): ClassDecoratorFactory<O>`\n\n创建类装饰器，支持可选参数\n\n\n### Interface: `PropertyMetadata`\n\n属性元数据接口\n\n\n  - target: Type<any>\n  - property: string | symbol\n  - options: O\n\n### Interface: `BasePropertyOptions`\n\n属性装饰器选项的基础接口\n\n\n  - name?: string\n  - required?: boolean\n  - defaultValue?: any\n  - validator?: (value: any) => boolean | string\n  - transformer?: (value: any) => any\n\n### Interface: `PropertyDecoratorFactory`\n\n属性装饰器工厂函数的重载类型\n\n\n\n### Function: `createPropertyDecorator(token: InjectionToken<PropertyMetadata<O>>, defaultOptions?: Partial<O>): PropertyDecoratorFactory<O>`\n\n创建属性装饰器，支持可选参数\n\n\n### Interface: `MethodMetadata`\n\n方法元数据接口\n\n\n  - target: Type<any>\n  - property: string | symbol\n  - descriptor: TypedPropertyDescriptor<any>\n  - options: O\n\n### Interface: `BaseMethodOptions`\n\n方法装饰器选项的基础接口\n\n\n  - async?: boolean\n  - timeout?: number\n  - retries?: number\n  - cache?: boolean\n  - middleware?: Array<\n        (\n            target: any,\n            property: string | symbol,\n            descriptor: PropertyDescriptor\n        ) => void\n    >\n\n### Interface: `MethodDecoratorFactory`\n\n方法装饰器工厂函数的重载类型\n\n\n\n### Function: `createMethodDecorator(token: InjectionToken<MethodMetadata<O>>, defaultOptions?: Partial<O>): MethodDecoratorFactory<O>`\n\n创建方法装饰器，支持可选参数\n\n\n### Interface: `ParameterMetadata`\n\n参数元数据接口\n\n\n  - target: Type<any>\n  - property: string | symbol | undefined\n  - parameterIndex: number\n  - options: O\n\n### Interface: `BaseParameterOptions`\n\n参数装饰器选项的基础接口\n\n\n  - name?: string\n  - type?: Type<any>\n  - optional?: boolean\n  - defaultValue?: any\n  - validator?: (value: any) => boolean\n  - transformer?: (value: any) => any\n\n### Interface: `ParameterDecoratorFactory`\n\n参数装饰器工厂函数的重载类型\n\n\n\n### Function: `createParameterDecorator(token: InjectionToken<ParameterMetadata<O>>, defaultOptions?: Partial<O>): ParameterDecoratorFactory<O>`\n\n创建参数装饰器，支持可选参数\n\n\n### Function: `conditional(condition: boolean | (() => boolean), decorator: T): T`\n\n条件装饰器：根据条件决定是否应用装饰器\n\n\n### Function: `compose(decorators: Array<ClassDecorator>): ClassDecorator`\n\n组合装饰器：将多个装饰器组合成一个\n\n\n### Function: `async(asyncDecorator: (options?: O) => Promise<ClassDecorator>): (options?: O) => ClassDecorator`\n\n异步装饰器：支持异步初始化的装饰器\n\n\n### Function: `cached(decorator: T): T`\n### Function: `validateOptions(validator: (options: O) => boolean | string, errorMessage?: string): (options: O) => O`\n\n验证装饰器选项\n\n\n### Function: `mergeOptions(defaultOptions: T, userOptions?: Partial<U>): T & Partial<U>`\n\n类型安全的装饰器选项合并\n\n\n### Function: `deepMergeOptions(defaultOptions: T, userOptions?: U): T & U`\n\n装饰器选项的深度合并\n\n",
    "hash": "d54eacff602e84a75d8f0a6f8f76433c",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsyringe"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/error.ts",
    "docs": "### Class: `DecoProError`\n\n基础错误类，提供更好的错误信息和调试支持\n\n\n  - Property: `code: string`\n  - Property: `timestamp: Date`\n  - Constructor: `constructor(message: string, code: string): void`\n    - Parameter: `message: string`\n    - Parameter: `code: string`\n  - Method: `toJSON(): void`\n    \n    获取结构化的错误信息\n    \n\n### Class: `DuplicateClassNameError`\n\n类名重复错误\n\n\n  - Constructor: `constructor(className: string): void`\n    - Parameter: `className: string`\n\n### Class: `ClassNameNotFoundError`\n\n类名未找到错误\n\n\n  - Constructor: `constructor(className: string): void`\n    - Parameter: `className: string`\n\n### Class: `JsonWithTypeNameError`\n\nJSON类型名称错误\n\n\n  - Constructor: `constructor(details?: string): void`\n    - Parameter: `details: string`\n\n### Class: `InjectionError`\n\n依赖注入错误\n\n\n  - Constructor: `constructor(token: string, details?: string): void`\n    - Parameter: `token: string`\n    - Parameter: `details: string`\n\n### Class: `CircularDependencyError`\n\n循环依赖错误\n\n\n  - Constructor: `constructor(dependencyChain: string[]): void`\n    - Parameter: `dependencyChain: string[]`\n",
    "hash": "c115770baac8c71b7739f3071ebf2441",
    "category": "class",
    "tags": [
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Class: `CoreModule`\n\n核心模块，提供基础的依赖注入功能\n\n\n\n### Interface: `BootstrapOptions`\n\n引导配置选项\n\n\n  - debug?: boolean\n    \n    是否启用调试模式\n    \n  - timeout?: number\n    \n    初始化超时时间（毫秒）\n    \n  - errorStrategy?: \"throw\" | \"warn\" | \"ignore\"\n    \n    错误处理策略\n    \n\n### Function: `bootstrap(modules: Type<any>[], options: BootstrapOptions): Promise<Injector>`\n\n引导应用程序\n\n",
    "hash": "0aa44e89e594fa4abf11624793a70355",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsyringe"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/injector.ts",
    "docs": "### Class: `Injector`\n\n增强的依赖注入器，提供类型安全的依赖解析和序列化功能\n\n\n  - Constructor: `constructor(injector: DependencyContainer): void`\n    - Parameter: `injector: DependencyContainer`\n  - Method: `get(token: InjectionToken<T>): T`\n    \n    解析单个依赖\n    \n  - Method: `getAll(token: InjectionToken<T>): T[]`\n    \n    解析所有匹配的依赖\n    \n  - Method: `create(): Injector`\n    \n    创建子容器\n    \n  - Method: `canResolve(token: InjectionToken<T>): boolean`\n    \n    检查是否可以解析指定的令牌\n    \n  - Method: `toJson(instance: T, _type?: Type<T>): any`\n    \n    将实例序列化为JSON对象\n    \n  - Method: `fromJson(obj: any, type?: Type<T>): T`\n    \n    从JSON对象反序列化为实例\n    \n  - Method: `filterTypeByName(name: string): void`\n    \n    根据类名过滤类型\n    \n  - Method: `getRegisteredTypeNames(): string[]`\n    \n    获取所有已注册的类型名称\n    \n  - Method: `isTypeRegistered(type: Type<T>): boolean`\n    \n    检查指定类型是否已注册\n    \n  - Method: `cleanup(instance: any): Promise<void>`\n    \n    清理资源（如果实例实现了OnDestroy接口）\n    \n",
    "hash": "5df46f50d36fa27bf368303a6c8b7d83",
    "category": "class",
    "tags": [
      "async",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsyringe"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/input.ts",
    "docs": "### Interface: `InputOptions`\n\nInput 装饰器选项接口\n\n\n  - name?: string\n    \n    属性的序列化名称\n    \n  - target?: () => Type<T>\n    \n    目标类型工厂函数\n    \n  - description?: string\n    \n    属性描述\n    \n  - required?: boolean\n    \n    是否必需\n    \n  - defaultValue?: T\n    \n    默认值\n    \n  - validator?: (value: T) => boolean | string\n    \n    值验证器\n    \n  - transformer?: (value: any) => T\n    \n    值转换器\n    \n  - readonly?: boolean\n    \n    是否只读\n    \n  - min?: number\n    \n    最小值（用于数字类型）\n    \n  - max?: number\n    \n    最大值（用于数字类型）\n    \n  - minLength?: number\n    \n    最小长度（用于字符串/数组类型）\n    \n  - maxLength?: number\n    \n    最大长度（用于字符串/数组类型）\n    \n  - pattern?: RegExp\n    \n    正则表达式验证（用于字符串类型）\n    \n  - enum?: T[]\n    \n    枚举值\n    \n\n### Function: `ValidatedInput(options: InputOptions<T>): IPropertyDecorator`\n\n创建带验证的 Input 装饰器\n\n\n### Function: `ReadonlyInput(): IPropertyDecorator`\n\n创建只读 Input 装饰器\n\n\n### Function: `ReadonlyInput(options: Omit<InputOptions<T>, \"readonly\">): IPropertyDecorator`\n\n创建只读 Input 装饰器\n\n\n### Function: `ReadonlyInput(options?: Omit<InputOptions<T>, \"readonly\">): IPropertyDecorator`\n\n创建只读 Input 装饰器\n\n\n### Function: `RequiredInput(): IPropertyDecorator`\n\n创建必需 Input 装饰器\n\n\n### Function: `RequiredInput(options: Omit<InputOptions<T>, \"required\">): IPropertyDecorator`\n\n创建必需 Input 装饰器\n\n\n### Function: `RequiredInput(options?: Omit<InputOptions<T>, \"required\">): IPropertyDecorator`\n\n创建必需 Input 装饰器\n\n\n### Interface: `InjectableOptions`\n\nInjectable 装饰器选项接口\n\n\n  - token?: InjectionToken<any> | InjectionToken<any>[]\n    \n    注入令牌\n    \n  - singleton?: boolean\n    \n    是否为单例\n    \n  - scope?: \"transient\" | \"singleton\" | \"container\"\n    \n    作用域\n    \n  - factory?: (...args: any[]) => any\n    \n    工厂函数\n    \n  - deps?: Array<InjectionToken<any>>\n    \n    依赖项\n    \n\n### Function: `Singleton(options?: Omit<InjectableOptions, \"singleton\" | \"scope\">): ClassDecorator`\n\n创建单例 Injectable 装饰器\n\n\n### Function: `Transient(options?: Omit<InjectableOptions, \"scope\">): ClassDecorator`\n\n创建瞬态 Injectable 装饰器\n\n",
    "hash": "5143df98f469fb0c63d2ef1cb3e573ff",
    "category": "interface",
    "tags": [
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsyringe"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/tokens.ts",
    "docs": "### Interface: `AppInitOptions`\n  - deps?: Type<any>[]\n\n### Interface: `AppInit`\n\n### Function: `isAppInit(val: any): val is AppInit`",
    "hash": "eeb4344103c950cc513d39883e58ae1e",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsyringe"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "src/types.ts",
    "docs": "### Type Alias: `Type = constructor<T>`\n\n表示一个可构造的类型\n\n\n### Function: `isType(val: unknown): val is Type<T>`\n\n类型守卫：检查值是否为构造函数类型\n\n\n### Interface: `HasToken`\n\n表示具有注入令牌的对象\n\n\n  - token: InjectionToken<T> | InjectionToken<T>[]\n\n### Function: `hasToken(val: unknown): val is HasToken<T>`\n\n类型守卫：检查对象是否具有有效的注入令牌\n\n\n### Interface: `OnInit`\n\n生命周期接口：初始化\n\n\n\n### Function: `isOnInit(val: unknown): val is OnInit`\n\n类型守卫：检查对象是否实现了OnInit接口\n\n\n### Interface: `OnDestroy`\n\n生命周期接口：销毁（修正拼写错误）\n\n\n\n### Function: `isOnDestroy(val: unknown): val is OnDestroy`\n\n类型守卫：检查对象是否实现了OnDestroy接口\n\n\n### Interface: `JsonWithTypeName`\n\n带有类型名称的JSON对象接口\n\n\n  - __typeName: string\n\n### Function: `isJsonWithTypeName(val: unknown): val is JsonWithTypeName`\n\n类型守卫：检查对象是否为带类型名称的JSON\n\n",
    "hash": "940492aae373fa55e7f7d635984a342e",
    "category": "types",
    "tags": [
      "async",
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsyringe",
      "tsyringe/dist/typings/types"
    ]
  },
  {
    "package_name": "@decopro/core",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "0505c10877da15110149338855a31866",
    "category": "module",
    "tags": [
      "async",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "path",
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/docs",
    "package_version": "1.1.0",
    "filename": "src/cli.ts",
    "docs": "### Interface: `CLIOptions`\n  - output?: string\n  - format?: \"json\" | \"markdown\" | \"both\"\n  - package?: string\n  - verbose?: boolean\n\n### Function: `parseArgs(): CLIOptions`\n### Function: `showHelp(): void`\n### Function: `log(message: string, verbose: boolean): void`\n### Function: `main(): void`\n### Function: `generatePackageMarkdown(pkg: any): string`\n### Function: `generateProjectMarkdown(project: any): string`",
    "hash": "98c7129c253379326802b82f0d677cf4",
    "category": "interface",
    "tags": [
      "cli",
      "command",
      "async",
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "fs",
      "path"
    ]
  },
  {
    "package_name": "@decopro/docs",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Interface: `Knowledge`\n  - package_name: string\n  - package_version: string\n  - filename: string\n  - docs: string\n  - hash: string\n  - category: string\n  - tags: string[]\n  - examples: string[]\n  - dependencies: string[]\n\n### Interface: `PackageDocumentation`\n  - package_name: string\n  - package_version: string\n  - description: string\n  - main_exports: string[]\n  - api_reference: string\n  - usage_examples: string[]\n  - architecture_overview: string\n  - dependencies: string[]\n  - knowledges: Knowledge[]\n\n### Interface: `ProjectDocumentation`\n  - project_name: string\n  - version: string\n  - description: string\n  - architecture: string\n  - packages: PackageDocumentation[]\n  - quick_start: string\n  - api_overview: string\n  - examples: string[]\n\n### Function: `generateTSKnowledges(projectRoot: string): Knowledge[]`\n### Function: `visitNode(node: ts.Node, output: string[], checker: ts.TypeChecker, sourceFile: ts.SourceFile, indentLevel: number): void`\n### Function: `getFunctionSignature(node: ts.FunctionLikeDeclaration, sourceFile: ts.SourceFile): string`\n### Function: `getDocumentation(symbol: ts.Symbol, checker: ts.TypeChecker): string`\n### Function: `getAllTSFiles(dir: string): string[]`\n### Function: `determineFileCategory(filePath: string, sourceFile: ts.SourceFile): string`\n### Function: `extractFileTags(sourceFile: ts.SourceFile, filePath: string): string[]`\n### Function: `extractCodeExamples(sourceFile: ts.SourceFile): string[]`\n### Function: `extractFileDependencies(sourceFile: ts.SourceFile): string[]`\n### Function: `generatePackageDocumentation(packageRoot: string): PackageDocumentation`\n### Function: `extractMainExports(packageRoot: string): string[]`\n### Function: `generateAPIReference(knowledges: Knowledge[]): string`\n### Function: `extractUsageExamples(knowledges: Knowledge[]): string[]`\n### Function: `generateArchitectureOverview(knowledges: Knowledge[]): string`\n### Function: `generateProjectDocumentation(projectRoot: string): ProjectDocumentation`\n### Function: `generateQuickStartGuide(packages: PackageDocumentation[]): string`\n### Function: `generateProjectAPIOverview(packages: PackageDocumentation[]): string`\n### Function: `generateProjectArchitecture(packages: PackageDocumentation[]): string`\n### Function: `sortPackagesByDependency(packages: PackageDocumentation[]): PackageDocumentation[]`",
    "hash": "54873c60b2f4c55f244eac0d105cae11",
    "category": "entity",
    "tags": [
      "entity",
      "database",
      "column",
      "relationship",
      "dependency-injection",
      "service",
      "controller",
      "api",
      "query-builder",
      "repository",
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "typescript",
      "fs",
      "path",
      "crypto",
      "${corePackage.package_name}"
    ]
  },
  {
    "package_name": "@decopro/docs",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "77b4af7ec0d1d66bbb559971bf627580",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/dpml",
    "package_version": "1.1.0",
    "filename": "src/ast.ts",
    "docs": "### Class: `BaseAst`\n  - Method: `visit(visitor: Visitor<O, C>, ctx: C): Promise<O>`\n\n### Interface: `Attributes`\n  - name: string\n  - value: string\n\n### Type Alias: `MarkdownContent = string`\n### Class: `CriteriaElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ConstraintElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `RuleElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `GuidelineElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ProcessElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Type Alias: `ExecutionElementContent = | MarkdownContent\n    | ProcessElement\n    | GuidelineElement\n    | RuleElement\n    | ConstraintElement\n    | CriteriaElement`\n### Class: `ExecutionElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `children: ExecutionElementContent[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `RegistryElement`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ParamsElement`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `LocationElement`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Type Alias: `ResourceElementContent = | LocationElement\n    | ParamsElement\n    | RegistryElement\n    | MarkdownContent`\n### Class: `ResourceElement`\n  - Property: `protocol: string`\n  - Property: `model: `auto` | `lazy` | `load``\n  - Property: `location: string`\n  - Property: `contents: ResourceElementContent[]`\n  - Property: `inline: boolean`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `PersonalityElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `children: (BaseAst | MarkdownContent)[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `PrincipleElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `children: BaseAst[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `KnowledgeElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `RoleElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `children: BaseAst[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ZhElement`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `EnElement`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `DefinitionElement`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ExamplesElement`\n  - Property: `children: BaseAst[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ExampleElement`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Type Alias: `TerminologyElementContent = | ExamplesElement\n    | DefinitionElement\n    | EnElement\n    | ZhElement\n    | MarkdownContent`\n### Class: `TerminologyElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `children: (BaseAst | MarkdownContent)[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `TerminologiesElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `children: TerminologyElement[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ChallengeElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `PlanElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ReasoningElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `ExplorationElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `content: MarkdownContent`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Type Alias: `ThoughtElementContent = | MarkdownContent\n    | ExplorationElement\n    | ReasoningElement\n    | PlanElement\n    | ChallengeElement`\n### Class: `ThoughtElement`\n  - Property: `attributes: Attributes[]`\n  - Property: `children: ThoughtElementContent[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Class: `PromptElement`\n  - Property: `children: BaseAst[]`\n  - Constructor: `constructor(children: BaseAst[]): void`\n    - Parameter: `children: BaseAst[]`\n  - Method: `visit(visitor: DpmlVisitor<O, C>, ctx: C): Promise<O>`\n\n### Interface: `DpmlVisitor`\n",
    "hash": "2aebff5d3609d4f3d64a7f48d409b399",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/ast",
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/dpml",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "",
    "hash": "94b515d08637837655f6ed0112ecbd2b",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/dpml",
    "package_version": "1.1.0",
    "filename": "src/main.ts",
    "docs": "",
    "hash": "a842594454555c821f1afb71db8aa0a3",
    "category": "module",
    "tags": [],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/dpml",
    "package_version": "1.1.0",
    "filename": "src/parsePrompt.ts",
    "docs": "### Function: `parsePrompt(input: string): PromptElement`\n\n将提示词字符串解析为 AST\n\n",
    "hash": "3c9f258d6fbb6c3db3bff3c0b43d6762",
    "category": "module",
    "tags": [
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/dpml",
    "package_version": "1.1.0",
    "filename": "src/parser.ts",
    "docs": "### Class: `Parser`\n  - Property: `tokens: Token[]`\n  - Property: `pos: any`\n  - Property: `currentToken: Token | null`\n  - Constructor: `constructor(tokens: Token[]): void`\n    - Parameter: `tokens: Token[]`\n  - Method: `parseResourceRef(token: Token): ResourceElement`\n  - Method: `parse(): PromptElement`\n  - Method: `equal(a: string, b: string): void`\n  - Method: `parseElement(): BaseAst`\n  - Method: `parseSimpleElement(attributes: Attributes[], tagName: string, ctor: new () => BaseAst): BaseAst`\n  - Method: `parseMixedContent(allowedTags: string[]): any[]`\n  - Method: `parseTextUntilClose(tagName: string): string`\n  - Method: `parseTerminologyElement(attributes: Attributes[]): TerminologyElement`\n  - Method: `parseExamplesElement(): ExamplesElement`\n  - Method: `parseExecutionElement(attributes: Attributes[]): ExecutionElement`\n  - Method: `parseResourceElement(attributes: Attributes[]): ResourceElement`\n  - Method: `parseRoleElement(attributes: Attributes[]): RoleElement`\n  - Method: `parseTerminologiesElement(attributes: Attributes[]): TerminologiesElement`\n  - Method: `parseThoughtElement(attributes: Attributes[]): ThoughtElement`\n  - Method: `advance(): void`\n",
    "hash": "aefdfe9bfb0e8afc2598423e60426a95",
    "category": "class",
    "tags": [
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/dpml",
    "package_version": "1.1.0",
    "filename": "src/run.ts",
    "docs": "### Class: `RunVisitor`\n  - Method: `visitPromptElement(ast: PromptElement, ctx: any): Promise<any>`\n  - Method: `visitThoughtElement(ast: ThoughtElement, ctx: any): Promise<any>`\n  - Method: `visitExplorationElement(ast: ExplorationElement, ctx: any): Promise<any>`\n  - Method: `visitReasoningElement(ast: ReasoningElement, ctx: any): Promise<any>`\n  - Method: `visitPlanElement(ast: PlanElement, ctx: any): Promise<any>`\n  - Method: `visitChallengeElement(ast: ChallengeElement, ctx: any): Promise<any>`\n  - Method: `visitTerminologiesElement(ast: TerminologiesElement, ctx: any): Promise<any>`\n  - Method: `visitTerminologyElement(ast: TerminologyElement, ctx: any): Promise<any>`\n  - Method: `visitExampleElement(ast: ExampleElement, ctx: any): Promise<any>`\n  - Method: `visitExamplesElement(ast: ExamplesElement, ctx: any): Promise<any>`\n  - Method: `visitDefinitionElement(ast: DefinitionElement, ctx: any): Promise<any>`\n  - Method: `visitEnElement(ast: EnElement, ctx: any): Promise<any>`\n  - Method: `visitZhElement(ast: ZhElement, ctx: any): Promise<any>`\n  - Method: `visitRoleElement(ast: RoleElement, ctx: any): Promise<any>`\n  - Method: `visitKnowledgeElement(ast: KnowledgeElement, ctx: any): Promise<any>`\n  - Method: `visitPrincipleElement(ast: PrincipleElement, ctx: any): Promise<any>`\n  - Method: `visitPersonalityElement(ast: PersonalityElement, ctx: any): Promise<any>`\n  - Method: `visitResourceElement(ast: ResourceElement, ctx: any): Promise<any>`\n  - Method: `visitLocationElement(ast: LocationElement, ctx: any): Promise<any>`\n  - Method: `visitParamsElement(ast: ParamsElement, ctx: any): Promise<any>`\n  - Method: `visitRegistryElement(ast: RegistryElement, ctx: any): Promise<any>`\n  - Method: `visitExecutionElement(ast: ExecutionElement, ctx: any): Promise<any>`\n  - Method: `visitProcessElement(ast: ProcessElement, ctx: any): Promise<any>`\n  - Method: `visitGuidelineElement(ast: GuidelineElement, ctx: any): Promise<any>`\n  - Method: `visitRuleElement(ast: RuleElement, ctx: any): Promise<any>`\n  - Method: `visitConstraintElement(ast: ConstraintElement, ctx: any): Promise<any>`\n  - Method: `visitCriteriaElement(ast: CriteriaElement, ctx: any): Promise<any>`\n  - Method: `visit(ast: Ast, ctx: any): Promise<any>`\n",
    "hash": "306ff3129fcebdf510cb3df63dffa65f",
    "category": "class",
    "tags": [
      "async",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/ast"
    ]
  },
  {
    "package_name": "@decopro/dpml",
    "package_version": "1.1.0",
    "filename": "src/tokenizer.ts",
    "docs": "### Interface: `Token`\n  - type: | \"OpenTag\"\n        | \"CloseTag\"\n        | \"Text\"\n        | \"Attribute\"\n        | \"TagEnd\"\n        | \"ResourceRef\"\n        | \"SelfCloseTagEnd\"\n  - value: string\n  - name?: string\n\n### Class: `Tokenizer`\n  - Property: `pos: any`\n  - Property: `tokens: Token[]`\n  - Method: `tokenize(input: string): Token[]`\n  - Method: `handleTag(input: string): void`\n  - Method: `handleResourceReference(input: string): void`\n  - Method: `handleText(input: string): void`\n",
    "hash": "61e7eec53c99ae3948672cfa73292d87",
    "category": "interface",
    "tags": [
      "interface",
      "types",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/dpml",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "src/McpOutputer.ts",
    "docs": "### Class: `McpOutputer`\n  - Method: `toSuccess(text: unknown): CallToolResult`\n  - Method: `toError(message: unknown): CallToolResult`\n  - Method: `handleError(error: unknown): CallToolResult`\n  - Method: `convertToMCPFormat(input: unknown): CallToolResult`\n  - Method: `toString(input: unknown): string`\n",
    "hash": "60d53df56703fc943fdbdfdd468b0f3e",
    "category": "class",
    "tags": [
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "@modelcontextprotocol/sdk/types"
    ]
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "src/askAgent.ts",
    "docs": "### Function: `askAgent(name: InjectionToken<R>, message: string): Promise<R>`",
    "hash": "e891ce7874a5c2096e388847be68e120",
    "category": "module",
    "tags": [
      "async",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "src/callTool.ts",
    "docs": "### Function: `toolCall(name: InjectionToken<R>, args: any): Promise<R>`",
    "hash": "994762c5428847a8a1e8b12a31415a0a",
    "category": "module",
    "tags": [
      "async",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "src/decorator.ts",
    "docs": "### Interface: `McpArgOptions`\n  - name: string\n  - zod: ZodTypeAny\n\n### Function: `isMcpArgOptions(val: any): val is McpArgOptions`\n### Interface: `ToolOptions`\n\ntool\n\n\n  - token: InjectionToken<R>\n  - title?: string\n  - description?: string\n  - annotations?: ToolAnnotations\n\n### Type Alias: `ResourceMetadata = Omit<McpResource, \"uri\" | \"name\">`\n### Interface: `ResourceOptions`\n  - name: string\n  - uriOrTemplate: string | ResourceTemplate\n  - config: ResourceMetadata\n\n### Interface: `PromptOptions`\n\nprompt\n\n\n  - name: string\n  - title?: string\n  - description?: string\n\n### Interface: `AgentOptions`\n\nagent\n\n\n  - token: string\n  - description: string\n  - tools?: Type<any>[]\n  - prompts?: Type<any>[]\n  - resources?: Type<any>[]\n  - children?: Type<any>[]\n\n### Interface: `WorkflowOptions`\n",
    "hash": "7b622e004b9ab77b5b123af315460094",
    "category": "interface",
    "tags": [
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "@modelcontextprotocol/sdk/types",
      "zod",
      "@modelcontextprotocol/sdk/server/mcp.js"
    ]
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "src/getPrompt.ts",
    "docs": "### Function: `getPrompt(token: InjectionToken<T>): Promise<T>`",
    "hash": "898b617c0bdac5b37dbe1d61c0092f57",
    "category": "module",
    "tags": [
      "async",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "src/getResource.ts",
    "docs": "### Function: `getResource(token: InjectionToken<T>): Promise<T>`",
    "hash": "73da0e527f33b6954c602bebaf148ec7",
    "category": "module",
    "tags": [
      "async",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "",
    "hash": "03a24c410328aaf9abd1aa53736ebba5",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "src/runWorkflow.ts",
    "docs": "### Function: `runWorkflow(token: InjectionToken<T>): Promise<T>`",
    "hash": "f893fb482a46bd121f6828de3bed2ef8",
    "category": "module",
    "tags": [
      "async",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/mcp",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/n8n",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "",
    "hash": "d41d8cd98f00b204e9800998ecf8427e",
    "category": "module",
    "tags": [],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/n8n",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/api.gen.ts",
    "docs": "### Interface: `FriendsOfFriendsListFriendOfFriend`\n\nA friend of a friend.\n\n\n  - referrer?: string\n  - user?: ApiUser\n\n### Interface: `GroupUserListGroupUser`\n\nA single user-role pair.\n\n\n  - state?: number\n  - user?: ApiUser\n\n### Interface: `UserGroupListUserGroup`\n\nA single group-role pair.\n\n\n  - group?: ApiGroup\n  - state?: number\n\n### Interface: `WriteLeaderboardRecordRequestLeaderboardRecordWrite`\n\nRecord values to write.\n\n\n  - metadata?: string\n  - operator?: ApiOperator\n  - score?: string\n  - subscore?: string\n\n### Interface: `WriteTournamentRecordRequestTournamentRecordWrite`\n\nRecord values to write.\n\n\n  - metadata?: string\n  - operator?: ApiOperator\n  - score?: string\n  - subscore?: string\n\n### Interface: `ApiAccount`\n\nA user with additional account details. Always the current user.\n\n\n  - custom_id?: string\n  - devices?: Array<ApiAccountDevice>\n  - disable_time?: string\n  - email?: string\n  - user?: ApiUser\n  - verify_time?: string\n  - wallet?: string\n\n### Interface: `ApiAccountApple`\n\nSend a Apple Sign In token to the server. Used with authenticate/link/unlink.\n\n\n  - token?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiAccountCustom`\n\nSend a custom ID to the server. Used with authenticate/link/unlink.\n\n\n  - id?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiAccountDevice`\n\nSend a device to the server. Used with authenticate/link/unlink and user.\n\n\n  - id?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiAccountEmail`\n\nSend an email with password to the server. Used with authenticate/link/unlink.\n\n\n  - email?: string\n  - password?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiAccountFacebook`\n\nSend a Facebook token to the server. Used with authenticate/link/unlink.\n\n\n  - token?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiAccountFacebookInstantGame`\n\nSend a Facebook Instant Game token to the server. Used with authenticate/link/unlink.\n\n\n  - signed_player_info?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiAccountGameCenter`\n\nSend Apple's Game Center account credentials to the server. Used with authenticate/link/unlink.\n\nhttps://developer.apple.com/documentation/gamekit/gklocalplayer/1515407-generateidentityverificationsign\n\n\n  - bundle_id?: string\n  - player_id?: string\n  - public_key_url?: string\n  - salt?: string\n  - signature?: string\n  - timestamp_seconds?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiAccountGoogle`\n\nSend a Google token to the server. Used with authenticate/link/unlink.\n\n\n  - token?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiAccountSteam`\n\nSend a Steam token to the server. Used with authenticate/link/unlink.\n\n\n  - token?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiChannelMessage`\n\nA message sent on a channel.\n\n\n  - channel_id?: string\n  - code?: number\n  - content?: string\n  - create_time?: string\n  - group_id?: string\n  - message_id?: string\n  - persistent?: boolean\n  - room_name?: string\n  - sender_id?: string\n  - update_time?: string\n  - user_id_one?: string\n  - user_id_two?: string\n  - username?: string\n\n### Interface: `ApiChannelMessageList`\n\nA list of channel messages, usually a result of a list operation.\n\n\n  - cacheable_cursor?: string\n  - messages?: Array<ApiChannelMessage>\n  - next_cursor?: string\n  - prev_cursor?: string\n\n### Interface: `ApiCreateGroupRequest`\n\nCreate a group with the current user as owner.\n\n\n  - avatar_url?: string\n  - description?: string\n  - lang_tag?: string\n  - max_count?: number\n  - name?: string\n  - open?: boolean\n\n### Interface: `ApiDeleteStorageObjectId`\n\nStorage objects to delete.\n\n\n  - collection?: string\n  - key?: string\n  - version?: string\n\n### Interface: `ApiDeleteStorageObjectsRequest`\n\nBatch delete storage objects.\n\n\n  - object_ids?: Array<ApiDeleteStorageObjectId>\n\n### Interface: `ApiEvent`\n\nRepresents an event to be passed through the server to registered event handlers.\n\n\n  - external?: boolean\n  - name?: string\n  - properties?: Record<string, string>\n  - timestamp?: string\n\n### Interface: `ApiFriend`\n\nA friend of a user.\n\n\n  - state?: number\n  - update_time?: string\n  - user?: ApiUser\n\n### Interface: `ApiFriendList`\n\nA collection of zero or more friends of the user.\n\n\n  - cursor?: string\n  - friends?: Array<ApiFriend>\n\n### Interface: `ApiFriendsOfFriendsList`\n  - cursor?: string\n  - friends_of_friends?: Array<FriendsOfFriendsListFriendOfFriend>\n\n### Interface: `ApiGroup`\n\nA group in the server.\n\n\n  - avatar_url?: string\n  - create_time?: string\n  - creator_id?: string\n  - description?: string\n  - edge_count?: number\n  - id?: string\n  - lang_tag?: string\n  - max_count?: number\n  - metadata?: string\n  - name?: string\n  - open?: boolean\n  - update_time?: string\n\n### Interface: `ApiGroupList`\n\nOne or more groups returned from a listing operation.\n\n\n  - cursor?: string\n  - groups?: Array<ApiGroup>\n\n### Interface: `ApiGroupUserList`\n\nA list of users belonging to a group, along with their role.\n\n\n  - cursor?: string\n  - group_users?: Array<GroupUserListGroupUser>\n\n### Interface: `ApiLeaderboardRecord`\n\nRepresents a complete leaderboard record with all scores and associated metadata.\n\n\n  - create_time?: string\n  - expiry_time?: string\n  - leaderboard_id?: string\n  - max_num_score?: number\n  - metadata?: string\n  - num_score?: number\n  - owner_id?: string\n  - rank?: string\n  - score?: string\n  - subscore?: string\n  - update_time?: string\n  - username?: string\n\n### Interface: `ApiLeaderboardRecordList`\n\nA set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.\n\n\n  - next_cursor?: string\n  - owner_records?: Array<ApiLeaderboardRecord>\n  - prev_cursor?: string\n  - rank_count?: string\n  - records?: Array<ApiLeaderboardRecord>\n\n### Interface: `ApiLinkSteamRequest`\n\nLink Steam to the current user's account.\n\n\n  - account?: ApiAccountSteam\n  - sync?: boolean\n\n### Interface: `ApiListSubscriptionsRequest`\n\nList user subscriptions.\n\n\n  - cursor?: string\n  - limit?: number\n\n### Interface: `ApiMatch`\n\nRepresents a realtime match.\n\n\n  - authoritative?: boolean\n  - handler_name?: string\n  - label?: string\n  - match_id?: string\n  - size?: number\n  - tick_rate?: number\n\n### Interface: `ApiMatchList`\n\nA list of realtime matches.\n\n\n  - matches?: Array<ApiMatch>\n\n### Interface: `ApiNotification`\n\nA notification in the server.\n\n\n  - code?: number\n  - content?: string\n  - create_time?: string\n  - id?: string\n  - persistent?: boolean\n  - sender_id?: string\n  - subject?: string\n\n### Interface: `ApiNotificationList`\n\nA collection of zero or more notifications.\n\n\n  - cacheable_cursor?: string\n  - notifications?: Array<ApiNotification>\n\n### Enum: `ApiOperator`\n\nOperator that can be used to override the one set in the leaderboard.\n\n\n  - Member: `NO_OVERRIDE`\n  - Member: `BEST`\n  - Member: `SET`\n  - Member: `INCREMENT`\n  - Member: `DECREMENT`\n### Interface: `ApiReadStorageObjectId`\n\nStorage objects to get.\n\n\n  - collection?: string\n  - key?: string\n  - user_id?: string\n\n### Interface: `ApiReadStorageObjectsRequest`\n\nBatch get storage objects.\n\n\n  - object_ids?: Array<ApiReadStorageObjectId>\n\n### Interface: `ApiRpc`\n\nExecute an Lua function on the server.\n\n\n  - http_key?: string\n  - id?: string\n  - payload?: string\n\n### Interface: `ApiSession`\n\nA user's session used to authenticate messages.\n\n\n  - created?: boolean\n  - refresh_token?: string\n  - token?: string\n\n### Interface: `ApiSessionLogoutRequest`\n\nLog out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.\n\n\n  - refresh_token?: string\n  - token?: string\n\n### Interface: `ApiSessionRefreshRequest`\n\nAuthenticate against the server with a refresh token.\n\n\n  - token?: string\n  - vars?: Record<string, string>\n\n### Interface: `ApiStorageObject`\n\nAn object within the storage engine.\n\n\n  - collection?: string\n  - create_time?: string\n  - key?: string\n  - permission_read?: number\n  - permission_write?: number\n  - update_time?: string\n  - user_id?: string\n  - value?: string\n  - version?: string\n\n### Interface: `ApiStorageObjectAck`\n\nA storage acknowledgement.\n\n\n  - collection?: string\n  - create_time?: string\n  - key?: string\n  - update_time?: string\n  - user_id?: string\n  - version?: string\n\n### Interface: `ApiStorageObjectAcks`\n\nBatch of acknowledgements for the storage object write.\n\n\n  - acks?: Array<ApiStorageObjectAck>\n\n### Interface: `ApiStorageObjectList`\n\nList of storage objects.\n\n\n  - cursor?: string\n  - objects?: Array<ApiStorageObject>\n\n### Interface: `ApiStorageObjects`\n\nBatch of storage objects.\n\n\n  - objects?: Array<ApiStorageObject>\n\n### Enum: `ApiStoreEnvironment`\n\nEnvironment where a purchase/subscription took place,\n\n\n  - Member: `UNKNOWN`\n  - Member: `SANDBOX`\n  - Member: `PRODUCTION`\n### Enum: `ApiStoreProvider`\n\nValidation Provider,\n\n\n  - Member: `APPLE_APP_STORE`\n  - Member: `GOOGLE_PLAY_STORE`\n  - Member: `HUAWEI_APP_GALLERY`\n  - Member: `FACEBOOK_INSTANT_STORE`\n### Interface: `ApiSubscriptionList`\n\nA list of validated subscriptions stored by Nakama.\n\n\n  - cursor?: string\n  - prev_cursor?: string\n  - validated_subscriptions?: Array<ApiValidatedSubscription>\n\n### Interface: `ApiTournament`\n\nA tournament on the server.\n\n\n  - authoritative?: boolean\n  - can_enter?: boolean\n  - category?: number\n  - create_time?: string\n  - description?: string\n  - duration?: number\n  - end_active?: number\n  - end_time?: string\n  - id?: string\n  - max_num_score?: number\n  - max_size?: number\n  - metadata?: string\n  - next_reset?: number\n  - operator?: ApiOperator\n  - prev_reset?: number\n  - size?: number\n  - sort_order?: number\n  - start_active?: number\n  - start_time?: string\n  - title?: string\n\n### Interface: `ApiTournamentList`\n\nA list of tournaments.\n\n\n  - cursor?: string\n  - tournaments?: Array<ApiTournament>\n\n### Interface: `ApiTournamentRecordList`\n\nA set of tournament records which may be part of a tournament records page or a batch of individual records.\n\n\n  - next_cursor?: string\n  - owner_records?: Array<ApiLeaderboardRecord>\n  - prev_cursor?: string\n  - rank_count?: string\n  - records?: Array<ApiLeaderboardRecord>\n\n### Interface: `ApiUpdateAccountRequest`\n\nUpdate a user's account details.\n\n\n  - avatar_url?: string\n  - display_name?: string\n  - lang_tag?: string\n  - location?: string\n  - timezone?: string\n  - username?: string\n\n### Interface: `ApiUpdateGroupRequest`\n\nUpdate fields in a given group.\n\n\n  - avatar_url?: string\n  - description?: string\n  - group_id?: string\n  - lang_tag?: string\n  - name?: string\n  - open?: boolean\n\n### Interface: `ApiUser`\n\nA user in the server.\n\n\n  - apple_id?: string\n  - avatar_url?: string\n  - create_time?: string\n  - display_name?: string\n  - edge_count?: number\n  - facebook_id?: string\n  - facebook_instant_game_id?: string\n  - gamecenter_id?: string\n  - google_id?: string\n  - id?: string\n  - lang_tag?: string\n  - location?: string\n  - metadata?: string\n  - online?: boolean\n  - steam_id?: string\n  - timezone?: string\n  - update_time?: string\n  - username?: string\n\n### Interface: `ApiUserGroupList`\n\nA list of groups belonging to a user, along with the user's role in each group.\n\n\n  - cursor?: string\n  - user_groups?: Array<UserGroupListUserGroup>\n\n### Interface: `ApiUsers`\n\nA collection of zero or more users.\n\n\n  - users?: Array<ApiUser>\n\n### Interface: `ApiValidatePurchaseAppleRequest`\n  - persist?: boolean\n  - receipt?: string\n\n### Interface: `ApiValidatePurchaseFacebookInstantRequest`\n  - persist?: boolean\n  - signed_request?: string\n\n### Interface: `ApiValidatePurchaseGoogleRequest`\n  - persist?: boolean\n  - purchase?: string\n\n### Interface: `ApiValidatePurchaseHuaweiRequest`\n  - persist?: boolean\n  - purchase?: string\n  - signature?: string\n\n### Interface: `ApiValidatePurchaseResponse`\n\nValidate IAP response.\n\n\n  - validated_purchases?: Array<ApiValidatedPurchase>\n\n### Interface: `ApiValidateSubscriptionAppleRequest`\n  - persist?: boolean\n  - receipt?: string\n\n### Interface: `ApiValidateSubscriptionGoogleRequest`\n  - persist?: boolean\n  - receipt?: string\n\n### Interface: `ApiValidateSubscriptionResponse`\n\nValidate Subscription response.\n\n\n  - validated_subscription?: ApiValidatedSubscription\n\n### Interface: `ApiValidatedPurchase`\n\nValidated Purchase stored by Nakama.\n\n\n  - create_time?: string\n  - environment?: ApiStoreEnvironment\n  - product_id?: string\n  - provider_response?: string\n  - purchase_time?: string\n  - refund_time?: string\n  - seen_before?: boolean\n  - store?: ApiStoreProvider\n  - transaction_id?: string\n  - update_time?: string\n  - user_id?: string\n\n### Interface: `ApiValidatedSubscription`\n  - active?: boolean\n  - create_time?: string\n  - environment?: ApiStoreEnvironment\n  - expiry_time?: string\n  - original_transaction_id?: string\n  - product_id?: string\n  - provider_notification?: string\n  - provider_response?: string\n  - purchase_time?: string\n  - refund_time?: string\n  - store?: ApiStoreProvider\n  - update_time?: string\n  - user_id?: string\n\n### Interface: `ApiWriteStorageObject`\n\nThe object to store.\n\n\n  - collection?: string\n  - key?: string\n  - permission_read?: number\n  - permission_write?: number\n  - value?: string\n  - version?: string\n\n### Interface: `ApiWriteStorageObjectsRequest`\n\nWrite objects to the storage engine.\n\n\n  - objects?: Array<ApiWriteStorageObject>\n\n### Class: `NakamaApi`\n  - Constructor: `constructor(serverKey: string, basePath: string, timeoutMs: number): void`\n    - Parameter: `serverKey: string`\n    - Parameter: `basePath: string`\n    - Parameter: `timeoutMs: number`\n  - Method: `healthcheck(bearerToken: string, options: any): Promise<any>`\n    \n    A healthcheck which load balancers can use to check the service.\n    \n  - Method: `deleteAccount(bearerToken: string, options: any): Promise<any>`\n    \n    Delete the current user's account.\n    \n  - Method: `getAccount(bearerToken: string, options: any): Promise<ApiAccount>`\n    \n    Fetch the current user's account.\n    \n  - Method: `updateAccount(bearerToken: string, body: ApiUpdateAccountRequest, options: any): Promise<any>`\n    \n    Update fields in the current user's account.\n    \n  - Method: `authenticateApple(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountApple, create?: boolean, username?: string, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with an Apple ID against the server.\n    \n  - Method: `authenticateCustom(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountCustom, create?: boolean, username?: string, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with a custom id against the server.\n    \n  - Method: `authenticateDevice(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountDevice, create?: boolean, username?: string, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with a device id against the server.\n    \n  - Method: `authenticateEmail(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountEmail, create?: boolean, username?: string, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with an email+password against the server.\n    \n  - Method: `authenticateFacebook(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountFacebook, create?: boolean, username?: string, sync?: boolean, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with a Facebook OAuth token against the server.\n    \n  - Method: `authenticateFacebookInstantGame(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountFacebookInstantGame, create?: boolean, username?: string, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with a Facebook Instant Game token against the server.\n    \n  - Method: `authenticateGameCenter(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountGameCenter, create?: boolean, username?: string, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with Apple's GameCenter against the server.\n    \n  - Method: `authenticateGoogle(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountGoogle, create?: boolean, username?: string, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with Google against the server.\n    \n  - Method: `authenticateSteam(basicAuthUsername: string, basicAuthPassword: string, account: ApiAccountSteam, create?: boolean, username?: string, sync?: boolean, options: any): Promise<ApiSession>`\n    \n    Authenticate a user with Steam against the server.\n    \n  - Method: `linkApple(bearerToken: string, body: ApiAccountApple, options: any): Promise<any>`\n    \n    Add an Apple ID to the social profiles on the current user's account.\n    \n  - Method: `linkCustom(bearerToken: string, body: ApiAccountCustom, options: any): Promise<any>`\n    \n    Add a custom ID to the social profiles on the current user's account.\n    \n  - Method: `linkDevice(bearerToken: string, body: ApiAccountDevice, options: any): Promise<any>`\n    \n    Add a device ID to the social profiles on the current user's account.\n    \n  - Method: `linkEmail(bearerToken: string, body: ApiAccountEmail, options: any): Promise<any>`\n    \n    Add an email+password to the social profiles on the current user's account.\n    \n  - Method: `linkFacebook(bearerToken: string, account: ApiAccountFacebook, sync?: boolean, options: any): Promise<any>`\n    \n    Add Facebook to the social profiles on the current user's account.\n    \n  - Method: `linkFacebookInstantGame(bearerToken: string, body: ApiAccountFacebookInstantGame, options: any): Promise<any>`\n    \n    Add Facebook Instant Game to the social profiles on the current user's account.\n    \n  - Method: `linkGameCenter(bearerToken: string, body: ApiAccountGameCenter, options: any): Promise<any>`\n    \n    Add Apple's GameCenter to the social profiles on the current user's account.\n    \n  - Method: `linkGoogle(bearerToken: string, body: ApiAccountGoogle, options: any): Promise<any>`\n    \n    Add Google to the social profiles on the current user's account.\n    \n  - Method: `linkSteam(bearerToken: string, body: ApiLinkSteamRequest, options: any): Promise<any>`\n    \n    Add Steam to the social profiles on the current user's account.\n    \n  - Method: `sessionRefresh(basicAuthUsername: string, basicAuthPassword: string, body: ApiSessionRefreshRequest, options: any): Promise<ApiSession>`\n    \n    Refresh a user's session using a refresh token retrieved from a previous authentication request.\n    \n  - Method: `unlinkApple(bearerToken: string, body: ApiAccountApple, options: any): Promise<any>`\n    \n    Remove the Apple ID from the social profiles on the current user's account.\n    \n  - Method: `unlinkCustom(bearerToken: string, body: ApiAccountCustom, options: any): Promise<any>`\n    \n    Remove the custom ID from the social profiles on the current user's account.\n    \n  - Method: `unlinkDevice(bearerToken: string, body: ApiAccountDevice, options: any): Promise<any>`\n    \n    Remove the device ID from the social profiles on the current user's account.\n    \n  - Method: `unlinkEmail(bearerToken: string, body: ApiAccountEmail, options: any): Promise<any>`\n    \n    Remove the email+password from the social profiles on the current user's account.\n    \n  - Method: `unlinkFacebook(bearerToken: string, body: ApiAccountFacebook, options: any): Promise<any>`\n    \n    Remove Facebook from the social profiles on the current user's account.\n    \n  - Method: `unlinkFacebookInstantGame(bearerToken: string, body: ApiAccountFacebookInstantGame, options: any): Promise<any>`\n    \n    Remove Facebook Instant Game profile from the social profiles on the current user's account.\n    \n  - Method: `unlinkGameCenter(bearerToken: string, body: ApiAccountGameCenter, options: any): Promise<any>`\n    \n    Remove Apple's GameCenter from the social profiles on the current user's account.\n    \n  - Method: `unlinkGoogle(bearerToken: string, body: ApiAccountGoogle, options: any): Promise<any>`\n    \n    Remove Google from the social profiles on the current user's account.\n    \n  - Method: `unlinkSteam(bearerToken: string, body: ApiAccountSteam, options: any): Promise<any>`\n    \n    Remove Steam from the social profiles on the current user's account.\n    \n  - Method: `listChannelMessages(bearerToken: string, channelId: string, limit?: number, forward?: boolean, cursor?: string, options: any): Promise<ApiChannelMessageList>`\n    \n    List a channel's message history.\n    \n  - Method: `event(bearerToken: string, body: ApiEvent, options: any): Promise<any>`\n    \n    Submit an event for processing in the server's registered runtime custom events handler.\n    \n  - Method: `deleteFriends(bearerToken: string, ids?: Array<string>, usernames?: Array<string>, options: any): Promise<any>`\n    \n    Delete one or more users by ID or username.\n    \n  - Method: `listFriends(bearerToken: string, limit?: number, state?: number, cursor?: string, options: any): Promise<ApiFriendList>`\n    \n    List all friends for the current user.\n    \n  - Method: `addFriends(bearerToken: string, ids?: Array<string>, usernames?: Array<string>, options: any): Promise<any>`\n    \n    Add friends by ID or username to a user's account.\n    \n  - Method: `blockFriends(bearerToken: string, ids?: Array<string>, usernames?: Array<string>, options: any): Promise<any>`\n    \n    Block one or more users by ID or username.\n    \n  - Method: `importFacebookFriends(bearerToken: string, account: ApiAccountFacebook, reset?: boolean, options: any): Promise<any>`\n    \n    Import Facebook friends and add them to a user's account.\n    \n  - Method: `listFriendsOfFriends(bearerToken: string, limit?: number, cursor?: string, options: any): Promise<ApiFriendsOfFriendsList>`\n    \n    List friends of friends for the current user.\n    \n  - Method: `importSteamFriends(bearerToken: string, account: ApiAccountSteam, reset?: boolean, options: any): Promise<any>`\n    \n    Import Steam friends and add them to a user's account.\n    \n  - Method: `listGroups(bearerToken: string, name?: string, cursor?: string, limit?: number, langTag?: string, members?: number, open?: boolean, options: any): Promise<ApiGroupList>`\n    \n    List groups based on given filters.\n    \n  - Method: `createGroup(bearerToken: string, body: ApiCreateGroupRequest, options: any): Promise<ApiGroup>`\n    \n    Create a new group with the current user as the owner.\n    \n  - Method: `deleteGroup(bearerToken: string, groupId: string, options: any): Promise<any>`\n    \n    Delete a group by ID.\n    \n  - Method: `updateGroup(bearerToken: string, groupId: string, body: ApiUpdateGroupRequest, options: any): Promise<any>`\n    \n    Update fields in a given group.\n    \n  - Method: `addGroupUsers(bearerToken: string, groupId: string, userIds?: Array<string>, options: any): Promise<any>`\n    \n    Add users to a group.\n    \n  - Method: `banGroupUsers(bearerToken: string, groupId: string, userIds?: Array<string>, options: any): Promise<any>`\n    \n    Ban a set of users from a group.\n    \n  - Method: `demoteGroupUsers(bearerToken: string, groupId: string, userIds?: Array<string>, options: any): Promise<any>`\n    \n    Demote a set of users in a group to the next role down.\n    \n  - Method: `joinGroup(bearerToken: string, groupId: string, options: any): Promise<any>`\n    \n    Immediately join an open group, or request to join a closed one.\n    \n  - Method: `kickGroupUsers(bearerToken: string, groupId: string, userIds?: Array<string>, options: any): Promise<any>`\n    \n    Kick a set of users from a group.\n    \n  - Method: `leaveGroup(bearerToken: string, groupId: string, options: any): Promise<any>`\n    \n    Leave a group the user is a member of.\n    \n  - Method: `promoteGroupUsers(bearerToken: string, groupId: string, userIds?: Array<string>, options: any): Promise<any>`\n    \n    Promote a set of users in a group to the next role up.\n    \n  - Method: `listGroupUsers(bearerToken: string, groupId: string, limit?: number, state?: number, cursor?: string, options: any): Promise<ApiGroupUserList>`\n    \n    List all users that are part of a group.\n    \n  - Method: `validatePurchaseApple(bearerToken: string, body: ApiValidatePurchaseAppleRequest, options: any): Promise<ApiValidatePurchaseResponse>`\n    \n    Validate Apple IAP Receipt\n    \n  - Method: `validatePurchaseFacebookInstant(bearerToken: string, body: ApiValidatePurchaseFacebookInstantRequest, options: any): Promise<ApiValidatePurchaseResponse>`\n    \n    Validate FB Instant IAP Receipt\n    \n  - Method: `validatePurchaseGoogle(bearerToken: string, body: ApiValidatePurchaseGoogleRequest, options: any): Promise<ApiValidatePurchaseResponse>`\n    \n    Validate Google IAP Receipt\n    \n  - Method: `validatePurchaseHuawei(bearerToken: string, body: ApiValidatePurchaseHuaweiRequest, options: any): Promise<ApiValidatePurchaseResponse>`\n    \n    Validate Huawei IAP Receipt\n    \n  - Method: `listSubscriptions(bearerToken: string, body: ApiListSubscriptionsRequest, options: any): Promise<ApiSubscriptionList>`\n    \n    List user's subscriptions.\n    \n  - Method: `validateSubscriptionApple(bearerToken: string, body: ApiValidateSubscriptionAppleRequest, options: any): Promise<ApiValidateSubscriptionResponse>`\n    \n    Validate Apple Subscription Receipt\n    \n  - Method: `validateSubscriptionGoogle(bearerToken: string, body: ApiValidateSubscriptionGoogleRequest, options: any): Promise<ApiValidateSubscriptionResponse>`\n    \n    Validate Google Subscription Receipt\n    \n  - Method: `getSubscription(bearerToken: string, productId: string, options: any): Promise<ApiValidatedSubscription>`\n    \n    Get subscription by product id.\n    \n  - Method: `deleteLeaderboardRecord(bearerToken: string, leaderboardId: string, options: any): Promise<any>`\n    \n    Delete a leaderboard record.\n    \n  - Method: `listLeaderboardRecords(bearerToken: string, leaderboardId: string, ownerIds?: Array<string>, limit?: number, cursor?: string, expiry?: string, options: any): Promise<ApiLeaderboardRecordList>`\n    \n    List leaderboard records.\n    \n  - Method: `writeLeaderboardRecord(bearerToken: string, leaderboardId: string, record: WriteLeaderboardRecordRequestLeaderboardRecordWrite, options: any): Promise<ApiLeaderboardRecord>`\n    \n    Write a record to a leaderboard.\n    \n  - Method: `listLeaderboardRecordsAroundOwner(bearerToken: string, leaderboardId: string, ownerId: string, limit?: number, expiry?: string, cursor?: string, options: any): Promise<ApiLeaderboardRecordList>`\n    \n    List leaderboard records that belong to a user.\n    \n  - Method: `listMatches(bearerToken: string, limit?: number, authoritative?: boolean, label?: string, minSize?: number, maxSize?: number, query?: string, options: any): Promise<ApiMatchList>`\n    \n    Fetch list of running matches.\n    \n  - Method: `deleteNotifications(bearerToken: string, ids?: Array<string>, options: any): Promise<any>`\n    \n    Delete one or more notifications for the current user.\n    \n  - Method: `listNotifications(bearerToken: string, limit?: number, cacheableCursor?: string, options: any): Promise<ApiNotificationList>`\n    \n    Fetch list of notifications.\n    \n  - Method: `rpcFunc2(bearerToken: string, id: string, payload?: string, httpKey?: string, options: any): Promise<ApiRpc>`\n    \n    Execute a Lua function on the server.\n    \n  - Method: `rpcFunc(bearerToken: string, id: string, body: string, httpKey?: string, options: any): Promise<ApiRpc>`\n    \n    Execute a Lua function on the server.\n    \n  - Method: `sessionLogout(bearerToken: string, body: ApiSessionLogoutRequest, options: any): Promise<any>`\n    \n    Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.\n    \n  - Method: `readStorageObjects(bearerToken: string, body: ApiReadStorageObjectsRequest, options: any): Promise<ApiStorageObjects>`\n    \n    Get storage objects.\n    \n  - Method: `writeStorageObjects(bearerToken: string, body: ApiWriteStorageObjectsRequest, options: any): Promise<ApiStorageObjectAcks>`\n    \n    Write objects into the storage engine.\n    \n  - Method: `deleteStorageObjects(bearerToken: string, body: ApiDeleteStorageObjectsRequest, options: any): Promise<any>`\n    \n    Delete one or more objects by ID or username.\n    \n  - Method: `listStorageObjects(bearerToken: string, collection: string, userId?: string, limit?: number, cursor?: string, options: any): Promise<ApiStorageObjectList>`\n    \n    List publicly readable storage objects in a given collection.\n    \n  - Method: `listStorageObjects2(bearerToken: string, collection: string, userId: string, limit?: number, cursor?: string, options: any): Promise<ApiStorageObjectList>`\n    \n    List publicly readable storage objects in a given collection.\n    \n  - Method: `listTournaments(bearerToken: string, categoryStart?: number, categoryEnd?: number, startTime?: number, endTime?: number, limit?: number, cursor?: string, options: any): Promise<ApiTournamentList>`\n    \n    List current or upcoming tournaments.\n    \n  - Method: `deleteTournamentRecord(bearerToken: string, tournamentId: string, options: any): Promise<any>`\n    \n    Delete a tournament record.\n    \n  - Method: `listTournamentRecords(bearerToken: string, tournamentId: string, ownerIds?: Array<string>, limit?: number, cursor?: string, expiry?: string, options: any): Promise<ApiTournamentRecordList>`\n    \n    List tournament records.\n    \n  - Method: `writeTournamentRecord2(bearerToken: string, tournamentId: string, record: WriteTournamentRecordRequestTournamentRecordWrite, options: any): Promise<ApiLeaderboardRecord>`\n    \n    Write a record to a tournament.\n    \n  - Method: `writeTournamentRecord(bearerToken: string, tournamentId: string, record: WriteTournamentRecordRequestTournamentRecordWrite, options: any): Promise<ApiLeaderboardRecord>`\n    \n    Write a record to a tournament.\n    \n  - Method: `joinTournament(bearerToken: string, tournamentId: string, options: any): Promise<any>`\n    \n    Attempt to join an open and running tournament.\n    \n  - Method: `listTournamentRecordsAroundOwner(bearerToken: string, tournamentId: string, ownerId: string, limit?: number, expiry?: string, cursor?: string, options: any): Promise<ApiTournamentRecordList>`\n    \n    List tournament records for a given owner.\n    \n  - Method: `getUsers(bearerToken: string, ids?: Array<string>, usernames?: Array<string>, facebookIds?: Array<string>, options: any): Promise<ApiUsers>`\n    \n    Fetch zero or more users by ID and/or username.\n    \n  - Method: `listUserGroups(bearerToken: string, userId: string, limit?: number, state?: number, cursor?: string, options: any): Promise<ApiUserGroupList>`\n    \n    List groups the current user belongs to.\n    \n  - Method: `buildFullUrl(basePath: string, fragment: string, queryParams: Map<string, any>): void`\n",
    "hash": "d2a9ba14075cd8abf1877007cc792246",
    "category": "api",
    "tags": [
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "js-base64"
    ]
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/client.ts",
    "docs": "### Interface: `RpcResponse`\n\nResponse for an RPC function executed on the server.\n\n\n  - id?: string\n    \n    The identifier of the function.\n    \n  - payload?: object\n    \n    The payload of the function which must be a JSON object.\n    \n\n### Interface: `LeaderboardRecord`\n\nRepresents a complete leaderboard record with all scores and associated metadata.\n\n\n  - create_time?: string\n    \n    The UNIX time when the leaderboard record was created.\n    \n  - expiry_time?: string\n    \n    The UNIX time when the leaderboard record expires.\n    \n  - leaderboard_id?: string\n    \n    The ID of the leaderboard this score belongs to.\n    \n  - metadata?: object\n    \n    Metadata.\n    \n  - num_score?: number\n    \n    The number of submissions to this score record.\n    \n  - owner_id?: string\n    \n    The ID of the score owner, usually a user or group.\n    \n  - rank?: number\n    \n    The rank of this record.\n    \n  - score?: number\n    \n    The score value.\n    \n  - subscore?: number\n    \n    An optional subscore value.\n    \n  - update_time?: string\n    \n    The UNIX time when the leaderboard record was updated.\n    \n  - username?: string\n    \n    The username of the score owner, if the owner is a user.\n    \n  - max_num_score?: number\n    \n    The maximum number of score updates allowed by the owner.\n    \n\n### Interface: `LeaderboardRecordList`\n\nA set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.\n\n\n  - next_cursor?: string\n    \n    The cursor to send when retrieving the next page, if any.\n    \n  - owner_records?: Array<LeaderboardRecord>\n    \n    A batched set of leaderboard records belonging to specified owners.\n    \n  - prev_cursor?: string\n    \n    The cursor to send when retrieving the previous page, if any.\n    \n  - rank_count?: number\n  - records?: Array<LeaderboardRecord>\n    \n    A list of leaderboard records.\n    \n\n### Interface: `Tournament`\n\nA Tournament on the server.\n\n\n  - authoritative?: boolean\n    \n    Whether the leaderboard was created authoritatively or not.\n    \n  - id?: string\n    \n    The ID of the tournament.\n    \n  - title?: string\n    \n    The title for the tournament.\n    \n  - description?: string\n    \n    The description of the tournament. May be blank.\n    \n  - duration?: number\n    \n    The UNIX timestamp for duration of a tournament.\n    \n  - category?: number\n    \n    The category of the tournament. e.g. \"vip\" could be category 1.\n    \n  - sort_order?: number\n    \n    ASC or DESC sort mode of scores in the tournament.\n    \n  - size?: number\n    \n    The current number of players in the tournament.\n    \n  - max_size?: number\n    \n    The maximum number of players for the tournament.\n    \n  - max_num_score?: number\n    \n    The maximum score updates allowed per player for the current tournament.\n    \n  - can_enter?: boolean\n    \n    True if the tournament is active and can enter. A computed value.\n    \n  - end_active?: number\n    \n    The UNIX timestamp when the tournament stops being active until next reset. A computed value.\n    \n  - next_reset?: number\n    \n    The UNIX timestamp when the tournament is next playable. A computed value.\n    \n  - metadata?: object\n    \n    Additional information stored as a JSON object.\n    \n  - create_time?: string\n    \n    The UNIX time when the tournament was created.\n    \n  - start_time?: string\n    \n    The UNIX time when the tournament will start.\n    \n  - end_time?: string\n    \n    The UNIX time when the tournament will be stopped.\n    \n  - start_active?: number\n    \n    The UNIX time when the tournament start being active. A computed value.\n    \n\n### Interface: `TournamentList`\n\nA list of tournaments.\n\n\n  - tournaments?: Array<Tournament>\n    \n    The list of tournaments returned.\n    \n  - cursor?: string\n    \n    A pagination cursor (optional).\n    \n\n### Interface: `TournamentRecordList`\n\nA set of tournament records, may be part of a tournament records page or a batch of individual records.\n\n\n  - next_cursor?: string\n    \n    The cursor to send when retireving the next page, if any.\n    \n  - owner_records?: Array<LeaderboardRecord>\n    \n    A batched set of tournament records belonging to specified owners.\n    \n  - prev_cursor?: string\n    \n    The cursor to send when retrieving the previous page, if any.\n    \n  - records?: Array<LeaderboardRecord>\n    \n    A list of tournament records.\n    \n\n### Interface: `WriteTournamentRecord`\n\nRecord values to write.\n\n\n  - metadata?: object\n    \n    Optional record metadata.\n    \n  - score?: string\n    \n    The score value to submit.\n    \n  - subscore?: string\n    \n    An optional secondary value.\n    \n\n### Interface: `WriteLeaderboardRecord`\n\nRecord values to write.\n\n\n  - metadata?: object\n    \n    Optional record metadata.\n    \n  - score?: string\n    \n    The score value to submit.\n    \n  - subscore?: string\n    \n    An optional secondary value.\n    \n\n### Interface: `WriteStorageObject`\n\nThe object to store.\n\n\n  - collection?: string\n    \n    The collection to store the object.\n    \n  - key?: string\n    \n    The key for the object within the collection.\n    \n  - permission_read?: number\n    \n    The read access permissions for the object.\n    \n  - permission_write?: number\n    \n    The write access permissions for the object.\n    \n  - value?: object\n    \n    The value of the object.\n    \n  - version?: string\n    \n    The version hash of the object to check. Possible values are: [\"\", \"*\", \"#hash#\"].\n    \n\n### Interface: `StorageObject`\n\nAn object within the storage engine.\n\n\n  - collection?: string\n    \n    The collection which stores the object.\n    \n  - create_time?: string\n    \n    The UNIX time when the object was created.\n    \n  - key?: string\n    \n    The key of the object within the collection.\n    \n  - permission_read?: number\n    \n    The read access permissions for the object.\n    \n  - permission_write?: number\n    \n    The write access permissions for the object.\n    \n  - update_time?: string\n    \n    The UNIX time when the object was last updated.\n    \n  - user_id?: string\n    \n    The user owner of the object.\n    \n  - value?: object\n    \n    The value of the object.\n    \n  - version?: string\n    \n    The version hash of the object.\n    \n\n### Interface: `StorageObjectList`\n\nList of storage objects.\n\n\n  - cursor?: string\n    \n    The cursor associated with the query a page of results.\n    \n  - objects: Array<StorageObject>\n    \n    The list of storage objects.\n    \n\n### Interface: `StorageObjects`\n\nBatch of storage objects.\n\n\n  - objects: Array<StorageObject>\n    \n    The batch of storage objects.\n    \n\n### Interface: `ChannelMessage`\n\nA message sent on a channel.\n\n\n  - channel_id?: string\n    \n    The channel this message belongs to.\n    \n  - code?: number\n    \n    The code representing a message type or category.\n    \n  - content?: object\n    \n    The content payload.\n    \n  - create_time?: string\n    \n    The UNIX time when the message was created.\n    \n  - group_id?: string\n    \n    The ID of the group, or an empty string if this message was not sent through a group channel.\n    \n  - message_id?: string\n    \n    The unique ID of this message.\n    \n  - persistent?: boolean\n    \n    True if the message was persisted to the channel's history, false otherwise.\n    \n  - room_name?: string\n    \n    The name of the chat room, or an empty string if this message was not sent through a chat room.\n    \n  - reference_id?: string\n    \n    Another message ID reference, if any.\n    \n  - sender_id?: string\n    \n    Message sender, usually a user ID.\n    \n  - update_time?: string\n    \n    The UNIX time when the message was last updated.\n    \n  - user_id_one?: string\n    \n    The ID of the first DM user, or an empty string if this message was not sent through a DM chat.\n    \n  - user_id_two?: string\n    \n    The ID of the second DM user, or an empty string if this message was not sent through a DM chat.\n    \n  - username?: string\n    \n    The username of the message sender, if any.\n    \n\n### Interface: `ChannelMessageList`\n\nA list of channel messages, usually a result of a list operation.\n\n\n  - cacheable_cursor?: string\n    \n    Cacheable cursor to list newer messages. Durable and designed to be stored, unlike next/prev cursors.\n    \n  - messages?: Array<ChannelMessage>\n    \n    A list of messages.\n    \n  - next_cursor?: string\n    \n    The cursor to send when retireving the next page, if any.\n    \n  - prev_cursor?: string\n    \n    The cursor to send when retrieving the previous page, if any.\n    \n\n### Interface: `User`\n\nA user in the system.\n\n\n  - avatar_url?: string\n    \n    A URL for an avatar image.\n    \n  - create_time?: string\n    \n    The UNIX time when the user was created.\n    \n  - display_name?: string\n    \n    The display name of the user.\n    \n  - edge_count?: number\n    \n    Number of related edges to this user.\n    \n  - facebook_id?: string\n    \n    The Facebook id in the user's account.\n    \n  - facebook_instant_game_id?: string\n    \n    The Facebook Instant Game ID in the user's account.\n    \n  - gamecenter_id?: string\n    \n    The Apple Game Center in of the user's account.\n    \n  - google_id?: string\n    \n    The Google id in the user's account.\n    \n  - id?: string\n    \n    The id of the user's account.\n    \n  - lang_tag?: string\n    \n    The language expected to be a tag which follows the BCP-47 spec.\n    \n  - location?: string\n    \n    The location set by the user.\n    \n  - metadata?: {}\n    \n    Additional information stored as a JSON object.\n    \n  - online?: boolean\n    \n    Indicates whether the user is currently online.\n    \n  - steam_id?: string\n    \n    The Steam id in the user's account.\n    \n  - timezone?: string\n    \n    The timezone set by the user.\n    \n  - update_time?: string\n    \n    The UNIX time when the user was last updated.\n    \n  - username?: string\n    \n    The username of the user's account.\n    \n\n### Interface: `Users`\n\nA collection of zero or more users.\n\n\n  - users?: Array<User>\n    \n    The User objects.\n    \n\n### Interface: `Friend`\n\nA friend of a user.\n\n\n  - state?: number\n    \n    The friend status.\n    \n  - user?: User\n    \n    The user object.\n    \n\n### Interface: `Friends`\n\nA collection of zero or more friends of the user.\n\n\n  - friends?: Array<Friend>\n    \n    The Friend objects.\n    \n  - cursor?: string\n    \n    Cursor for the next page of results, if any.\n    \n\n### Interface: `FriendOfFriend`\n\nA friend of a friend.\n\n\n  - referrer?: string\n  - user?: User\n\n### Interface: `FriendsOfFriends`\n\nFriends of the user's friends.\n\n\n  - cursor?: string\n  - friends_of_friends?: Array<FriendOfFriend>\n\n### Interface: `GroupUser`\n\nA user-role pair representing the user's role in a group.\n\n\n  - user?: User\n    \n    The user.\n    \n  - state?: number\n    \n    Their role within the group.\n    \n\n### Interface: `GroupUserList`\n\nA list of users belonging to a group along with their role in it.\n\n\n  - group_users?: Array<GroupUser>\n    \n    The user-role pairs.\n    \n  - cursor?: string\n    \n    Cursor for the next page of results, if any.\n    \n\n### Interface: `Group`\n\nA group in the server.\n\n\n  - avatar_url?: string\n    \n    A URL for an avatar image.\n    \n  - create_time?: string\n    \n    The UNIX time when the group was created.\n    \n  - creator_id?: string\n    \n    The id of the user who created the group.\n    \n  - description?: string\n    \n    A description for the group.\n    \n  - edge_count?: number\n    \n    The current count of all members in the group.\n    \n  - id?: string\n    \n    The id of a group.\n    \n  - lang_tag?: string\n    \n    The language expected to be a tag which follows the BCP-47 spec.\n    \n  - max_count?: number\n    \n    The maximum number of members allowed.\n    \n  - metadata?: {}\n    \n    Additional information stored as a JSON object.\n    \n  - name?: string\n    \n    The unique name of the group.\n    \n  - open?: boolean\n    \n    Anyone can join open groups, otherwise only admins can accept members.\n    \n  - update_time?: string\n    \n    The UNIX time when the group was last updated.\n    \n\n### Interface: `GroupList`\n\nOne or more groups returned from a listing operation.\n\n\n  - cursor?: string\n    \n    A cursor used to get the next page.\n    \n  - groups?: Array<Group>\n    \n    One or more groups.\n    \n\n### Interface: `UserGroup`\n\nA group-role pair representing the user's groups and their role in each.\n\n\n  - group?: Group\n    \n    The group.\n    \n  - state?: number\n    \n    The user's role within the group.\n    \n\n### Interface: `UserGroupList`\n\nA list of groups belonging to a user along with their role in it.\n\n\n  - user_groups?: Array<UserGroup>\n    \n    The group-role pairs.\n    \n  - cursor?: string\n    \n    Cursor for the next page of results, if any.\n    \n\n### Interface: `NotificationList`\n\nA collection of zero or more notifications.\n\n\n  - cacheable_cursor?: string\n    \n    Use this cursor to paginate notifications. Cache this to catch up to new notifications.\n    \n  - notifications?: Array<Notification>\n    \n    Collection of notifications.\n    \n\n### Interface: `ValidatedSubscription`\n  - active?: boolean\n  - create_time?: string\n  - environment?: ApiStoreEnvironment\n  - expiry_time?: string\n  - original_transaction_id?: string\n  - product_id?: string\n  - provider_notification?: string\n  - provider_response?: string\n  - purchase_time?: string\n  - refund_time?: string\n  - store?: ApiStoreProvider\n  - update_time?: string\n  - user_id?: string\n\n### Interface: `SubscriptionList`\n\nA list of validated subscriptions stored by Nakama.\n\n\n  - cursor?: string\n  - prev_cursor?: string\n  - validated_subscriptions?: Array<ValidatedSubscription>\n\n### Class: `Client`\n\nA client for Nakama server.\n\n\n  - Property: `expiredTimespanMs: any`\n    \n    The expired timespan used to check session lifetime.\n    \n  - Property: `apiClient: NakamaApi`\n    \n    The low level API client for Nakama server.\n    \n  - Constructor: `constructor(serverkey: any, host: any, port: any, useSSL: any, timeout: any, autoRefreshSession: any): void`\n    - Parameter: `serverkey: any`\n    - Parameter: `host: any`\n    - Parameter: `port: any`\n    - Parameter: `useSSL: any`\n    - Parameter: `timeout: any`\n    - Parameter: `autoRefreshSession: any`\n  - Method: `addGroupUsers(session: Session, groupId: string, ids?: Array<string>): Promise<boolean>`\n    \n    Add users to a group, or accept their join requests.\n    \n  - Method: `addFriends(session: Session, ids?: Array<string>, usernames?: Array<string>): Promise<boolean>`\n    \n    Add friends by ID or username to a user's account.\n    \n  - Method: `authenticateApple(token: string, create?: boolean, username?: string, vars: Record<string, string>, options: any): void`\n    \n    Authenticate a user with an Apple ID against the server.\n    \n  - Method: `authenticateCustom(id: string, create?: boolean, username?: string, vars: Record<string, string>, options: any): Promise<Session>`\n    \n    Authenticate a user with a custom id against the server.\n    \n  - Method: `authenticateDevice(id: string, create?: boolean, username?: string, vars?: Record<string, string>): Promise<Session>`\n    \n    Authenticate a user with a device id against the server.\n    \n  - Method: `authenticateEmail(email: string, password: string, create?: boolean, username?: string, vars?: Record<string, string>): Promise<Session>`\n    \n    Authenticate a user with an email+password against the server.\n    \n  - Method: `authenticateFacebookInstantGame(signedPlayerInfo: string, create?: boolean, username?: string, vars?: Record<string, string>, options: any): Promise<Session>`\n    \n    Authenticate a user with a Facebook Instant Game token against the server.\n    \n  - Method: `authenticateFacebook(token: string, create?: boolean, username?: string, sync?: boolean, vars?: Record<string, string>, options: any): Promise<Session>`\n    \n    Authenticate a user with a Facebook OAuth token against the server.\n    \n  - Method: `authenticateGoogle(token: string, create?: boolean, username?: string, vars?: Record<string, string>, options: any): Promise<Session>`\n    \n    Authenticate a user with Google against the server.\n    \n  - Method: `authenticateGameCenter(bundleId: string, playerId: string, publicKeyUrl: string, salt: string, signature: string, timestamp: string, username?: string, create?: boolean, vars?: Record<string, string>, options: any): Promise<Session>`\n    \n    Authenticate a user with GameCenter against the server.\n    \n  - Method: `authenticateSteam(token: string, create?: boolean, username?: string, sync?: boolean, vars?: Record<string, string>): Promise<Session>`\n    \n    Authenticate a user with Steam against the server.\n    \n  - Method: `banGroupUsers(session: Session, groupId: string, ids?: Array<string>): Promise<boolean>`\n    \n    Ban users from a group.\n    \n  - Method: `blockFriends(session: Session, ids?: Array<string>, usernames?: Array<string>): Promise<boolean>`\n    \n    Block one or more users by ID or username.\n    \n  - Method: `createGroup(session: Session, request: ApiCreateGroupRequest): Promise<Group>`\n    \n    Create a new group with the current user as the creator and superadmin.\n    \n  - Method: `createSocket(useSSL: any, verbose: boolean, adapter: WebSocketAdapter, sendTimeoutMs: number): Socket`\n    \n    A socket created with the client's configuration.\n    \n  - Method: `deleteAccount(session: Session): Promise<boolean>`\n    \n    Delete the current user's account.\n    \n  - Method: `deleteFriends(session: Session, ids?: Array<string>, usernames?: Array<string>): Promise<boolean>`\n    \n    Delete one or more users by ID or username.\n    \n  - Method: `deleteGroup(session: Session, groupId: string): Promise<boolean>`\n    \n    Delete a group the user is part of and has permissions to delete.\n    \n  - Method: `deleteNotifications(session: Session, ids?: Array<string>): Promise<boolean>`\n    \n    Delete one or more notifications\n    \n  - Method: `deleteStorageObjects(session: Session, request: ApiDeleteStorageObjectsRequest): Promise<boolean>`\n    \n    Delete one or more storage objects\n    \n  - Method: `deleteTournamentRecord(session: Session, tournamentId: string): Promise<any>`\n    \n    Delete a tournament record.\n    \n  - Method: `demoteGroupUsers(session: Session, groupId: string, ids: Array<string>): Promise<boolean>`\n    \n    Demote a set of users in a group to the next role down.\n    \n  - Method: `emitEvent(session: Session, request: ApiEvent): Promise<boolean>`\n    \n    Submit an event for processing in the server's registered runtime custom events handler.\n    \n  - Method: `getAccount(session: Session): Promise<ApiAccount>`\n    \n    Fetch the current user's account.\n    \n  - Method: `getSubscription(session: Session, productId: string): Promise<ApiValidatedSubscription>`\n    \n    Get subscription by product id.\n    \n  - Method: `importFacebookFriends(session: Session, request: ApiAccountFacebook): Promise<boolean>`\n    \n    Import Facebook friends and add them to a user's account.\n    \n  - Method: `importSteamFriends(session: Session, request: ApiAccountSteam, reset: boolean): Promise<boolean>`\n    \n    Import Steam friends and add them to a user's account.\n    \n  - Method: `getUsers(session: Session, ids?: Array<string>, usernames?: Array<string>, facebookIds?: Array<string>): Promise<Users>`\n    \n    Fetch zero or more users by ID and/or username.\n    \n  - Method: `joinGroup(session: Session, groupId: string): Promise<boolean>`\n    \n    Join a group that's open, or send a request to join a group that is closed.\n    \n  - Method: `joinTournament(session: Session, tournamentId: string): Promise<boolean>`\n  - Method: `kickGroupUsers(session: Session, groupId: string, ids?: Array<string>): Promise<boolean>`\n    \n    Kick users from a group, or decline their join requests.\n    \n  - Method: `leaveGroup(session: Session, groupId: string): Promise<boolean>`\n    \n    Leave a group the user is part of.\n    \n  - Method: `listChannelMessages(session: Session, channelId: string, limit?: number, forward?: boolean, cursor?: string): Promise<ChannelMessageList>`\n    \n    List a channel's message history.\n    \n  - Method: `listGroupUsers(session: Session, groupId: string, state?: number, limit?: number, cursor?: string): Promise<GroupUserList>`\n    \n    List a group's users.\n    \n  - Method: `listUserGroups(session: Session, userId: string, state?: number, limit?: number, cursor?: string): Promise<UserGroupList>`\n    \n    List a user's groups.\n    \n  - Method: `listGroups(session: Session, name?: string, cursor?: string, limit?: number): Promise<GroupList>`\n    \n    List groups based on given filters.\n    \n  - Method: `linkApple(session: Session, request: ApiAccountApple): Promise<boolean>`\n    \n    Add an Apple ID to the social profiles on the current user's account.\n    \n  - Method: `linkCustom(session: Session, request: ApiAccountCustom): Promise<boolean>`\n    \n    Add a custom ID to the social profiles on the current user's account.\n    \n  - Method: `linkDevice(session: Session, request: ApiAccountDevice): Promise<boolean>`\n    \n    Add a device ID to the social profiles on the current user's account.\n    \n  - Method: `linkEmail(session: Session, request: ApiAccountEmail): Promise<boolean>`\n    \n    Add an email+password to the social profiles on the current user's account.\n    \n  - Method: `linkFacebook(session: Session, request: ApiAccountFacebook): Promise<boolean>`\n    \n    Add Facebook to the social profiles on the current user's account.\n    \n  - Method: `linkFacebookInstantGame(session: Session, request: ApiAccountFacebookInstantGame): Promise<boolean>`\n    \n    Add Facebook Instant to the social profiles on the current user's account.\n    \n  - Method: `linkGoogle(session: Session, request: ApiAccountGoogle): Promise<boolean>`\n    \n    Add Google to the social profiles on the current user's account.\n    \n  - Method: `linkGameCenter(session: Session, request: ApiAccountGameCenter): Promise<boolean>`\n    \n    Add GameCenter to the social profiles on the current user's account.\n    \n  - Method: `linkSteam(session: Session, request: ApiLinkSteamRequest): Promise<boolean>`\n    \n    Add Steam to the social profiles on the current user's account.\n    \n  - Method: `listFriends(session: Session, state?: number, limit?: number, cursor?: string): Promise<Friends>`\n    \n    List all friends for the current user.\n    \n  - Method: `listFriendsOfFriends(session: Session, limit?: number, cursor?: string): Promise<FriendsOfFriends>`\n    \n    List friends of friends for the current user.\n    \n  - Method: `listLeaderboardRecords(session: Session, leaderboardId: string, ownerIds?: Array<string>, limit?: number, cursor?: string, expiry?: string): Promise<LeaderboardRecordList>`\n    \n    List leaderboard records\n    \n  - Method: `listLeaderboardRecordsAroundOwner(session: Session, leaderboardId: string, ownerId: string, limit?: number, expiry?: string, cursor?: string): Promise<LeaderboardRecordList>`\n  - Method: `listMatches(session: Session, limit?: number, authoritative?: boolean, label?: string, minSize?: number, maxSize?: number, query?: string): Promise<ApiMatchList>`\n    \n    Fetch list of running matches.\n    \n  - Method: `listNotifications(session: Session, limit?: number, cacheableCursor?: string): Promise<NotificationList>`\n    \n    Fetch list of notifications.\n    \n  - Method: `listStorageObjects(session: Session, collection: string, userId?: string, limit?: number, cursor?: string): Promise<StorageObjectList>`\n    \n    List storage objects.\n    \n  - Method: `listTournaments(session: Session, categoryStart?: number, categoryEnd?: number, startTime?: number, endTime?: number, limit?: number, cursor?: string): Promise<TournamentList>`\n    \n    List current or upcoming tournaments.\n    \n  - Method: `listSubscriptions(session: Session, cursor?: string, limit?: number): Promise<SubscriptionList>`\n    \n    List user subscriptions.\n    \n  - Method: `listTournamentRecords(session: Session, tournamentId: string, ownerIds?: Array<string>, limit?: number, cursor?: string, expiry?: string): Promise<TournamentRecordList>`\n    \n    List tournament records from a given tournament.\n    \n  - Method: `listTournamentRecordsAroundOwner(session: Session, tournamentId: string, ownerId: string, limit?: number, expiry?: string, cursor?: string): Promise<TournamentRecordList>`\n    \n    List tournament records from a given tournament around the owner.\n    \n  - Method: `promoteGroupUsers(session: Session, groupId: string, ids?: Array<string>): Promise<boolean>`\n    \n    Promote users in a group to the next role up.\n    \n  - Method: `readStorageObjects(session: Session, request: ApiReadStorageObjectsRequest): Promise<StorageObjects>`\n    \n    Fetch storage objects.\n    \n  - Method: `rpc(session: Session, id: string, input: object): Promise<RpcResponse>`\n    \n    Execute an RPC function on the server.\n    \n  - Method: `rpcHttpKey(httpKey: string, id: string, input?: object): Promise<RpcResponse>`\n    \n    Execute an RPC function on the server.\n    \n  - Method: `sessionLogout(session: Session, token: string, refreshToken: string): Promise<boolean>`\n    \n    Log out a session, invalidate a refresh token, or log out all sessions/refresh tokens for a user.\n    \n  - Method: `sessionRefresh(session: Session, vars: Record<string, string>): Promise<Session>`\n    \n    Refresh a user's session using a refresh token retrieved from a previous authentication request.\n    \n  - Method: `unlinkApple(session: Session, request: ApiAccountApple): Promise<boolean>`\n    \n    Remove the Apple ID from the social profiles on the current user's account.\n    \n  - Method: `unlinkCustom(session: Session, request: ApiAccountCustom): Promise<boolean>`\n    \n    Remove custom ID from the social profiles on the current user's account.\n    \n  - Method: `unlinkDevice(session: Session, request: ApiAccountDevice): Promise<boolean>`\n    \n    Remove a device ID from the social profiles on the current user's account.\n    \n  - Method: `unlinkEmail(session: Session, request: ApiAccountEmail): Promise<boolean>`\n    \n    Remove an email+password from the social profiles on the current user's account.\n    \n  - Method: `unlinkFacebook(session: Session, request: ApiAccountFacebook): Promise<boolean>`\n    \n    Remove Facebook from the social profiles on the current user's account.\n    \n  - Method: `unlinkFacebookInstantGame(session: Session, request: ApiAccountFacebookInstantGame): Promise<boolean>`\n    \n    Remove Facebook Instant social profiles from the current user's account.\n    \n  - Method: `unlinkGoogle(session: Session, request: ApiAccountGoogle): Promise<boolean>`\n    \n    Remove Google from the social profiles on the current user's account.\n    \n  - Method: `unlinkGameCenter(session: Session, request: ApiAccountGameCenter): Promise<boolean>`\n    \n    Remove GameCenter from the social profiles on the current user's account.\n    \n  - Method: `unlinkSteam(session: Session, request: ApiAccountSteam): Promise<boolean>`\n    \n    Remove Steam from the social profiles on the current user's account.\n    \n  - Method: `updateAccount(session: Session, request: ApiUpdateAccountRequest): Promise<boolean>`\n    \n    Update fields in the current user's account.\n    \n  - Method: `updateGroup(session: Session, groupId: string, request: ApiUpdateGroupRequest): Promise<boolean>`\n    \n    Update a group the user is part of and has permissions to update.\n    \n  - Method: `validatePurchaseApple(session: Session, receipt?: string, persist: boolean): Promise<ApiValidatePurchaseResponse>`\n    \n    Validate an Apple IAP receipt.\n    \n  - Method: `validatePurchaseFacebookInstant(session: Session, signedRequest?: string, persist: boolean): Promise<ApiValidatePurchaseResponse>`\n    \n    Validate a FB Instant IAP receipt.\n    \n  - Method: `validatePurchaseGoogle(session: Session, purchase?: string, persist: boolean): Promise<ApiValidatePurchaseResponse>`\n    \n    Validate a Google IAP receipt.\n    \n  - Method: `validatePurchaseHuawei(session: Session, purchase?: string, signature?: string, persist: boolean): Promise<ApiValidatePurchaseResponse>`\n    \n    Validate a Huawei IAP receipt.\n    \n  - Method: `validateSubscriptionApple(session: Session, receipt: string, persist: boolean): Promise<ApiValidateSubscriptionResponse>`\n    \n    Validate Apple Subscription Receipt\n    \n  - Method: `validateSubscriptionGoogle(session: Session, receipt: string, persist: boolean): Promise<ApiValidateSubscriptionResponse>`\n    \n    Validate Google Subscription Receipt\n    \n  - Method: `writeLeaderboardRecord(session: Session, leaderboardId: string, request: WriteLeaderboardRecord): Promise<LeaderboardRecord>`\n    \n    Write a record to a leaderboard.\n    \n  - Method: `writeStorageObjects(session: Session, objects: Array<WriteStorageObject>): Promise<ApiStorageObjectAcks>`\n    \n    Write storage objects.\n    \n  - Method: `writeTournamentRecord(session: Session, tournamentId: string, request: WriteTournamentRecord): Promise<LeaderboardRecord>`\n    \n    Write a record to a tournament.\n    \n",
    "hash": "376df74b00f4756b8d77dabe0b6b568e",
    "category": "interface",
    "tags": [
      "cli",
      "command",
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "",
    "hash": "c01fcfa7d173b5273d8ade41b76ae381",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/rpc.ts",
    "docs": "### Interface: `AddAdminPlanRpcInput`\n  - name: string\n  - description?: string\n  - price: number\n  - duration: number\n  - features?: string\n  - settings?: any\n  - groupId?: string\n\n### Interface: `AddAdminPlanRpcOutput`\n  - success: boolean\n  - planId: string\n  - groupId: string\n\n### Class: `NakamaRpc`\n  - Constructor: `constructor(client: Client, session: Session): void`\n    - Parameter: `client: Client`\n    - Parameter: `session: Session`\n  - Method: `addAdminPlanRpc(input: AddAdminPlanRpcInput): Promise<AddAdminPlanRpcOutput | undefined>`\n",
    "hash": "7d9187a06c441626847cd8b91fce7ba5",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/session.ts",
    "docs": "### Interface: `ISession`\n\nA session authenticated for a user with Nakama server.\n\n\n  - token: string\n    \n    The authorization token used to construct this session.\n    \n  - created: boolean\n    \n    If the user account for this session was just created.\n    \n  - created_at: number\n    \n    The UNIX timestamp when this session was created.\n    \n  - expires_at?: number\n    \n    The UNIX timestamp when this session will expire.\n    \n  - refresh_expires_at?: number\n    \n    The UNIX timestamp when the refresh token will expire.\n    \n  - refresh_token: string\n    \n    Refresh token that can be used for session token renewal.\n    \n  - username?: string\n    \n    The username of the user who owns this session.\n    \n  - user_id?: string\n    \n    The ID of the user who owns this session.\n    \n  - vars?: object\n    \n    Any custom properties associated with this session.\n    \n\n### Class: `Session`\n  - Property: `token: string`\n    \n    The authorization token used to construct this session.\n    \n  - Property: `created_at: number`\n    \n    The UNIX timestamp when this session was created.\n    \n  - Property: `expires_at: number`\n    \n    The UNIX timestamp when this session will expire.\n    \n  - Property: `refresh_expires_at: number`\n    \n    The UNIX timestamp when the refresh token will expire.\n    \n  - Property: `refresh_token: string`\n    \n    Refresh token that can be used for session token renewal.\n    \n  - Property: `username: string`\n    \n    The username of the user who owns this session.\n    \n  - Property: `user_id: string`\n    \n    The ID of the user who owns this session.\n    \n  - Property: `vars: object`\n    \n    Any custom properties associated with this session.\n    \n  - Constructor: `constructor(token: string, refresh_token: string, created: boolean): void`\n    - Parameter: `token: string`\n      \n      The authorization token used to construct this session.\n      \n    - Parameter: `refresh_token: string`\n      \n      Refresh token that can be used for session token renewal.\n      \n    - Parameter: `created: boolean`\n      \n      If the user account for this session was just created.\n      \n  - Method: `isexpired(currenttime: number): boolean`\n    \n    If the session has expired.\n    \n  - Method: `isrefreshexpired(currenttime: number): boolean`\n    \n    If the refresh token has expired.\n    \n  - Method: `update(token: string, refreshToken: string): void`\n  - Method: `decodeJWT(token: string): void`\n  - Method: `restore(token: string, refreshToken: string): Session`\n",
    "hash": "64b8a69d995099d628e67d7166abea33",
    "category": "interface",
    "tags": [
      "interface",
      "types",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "js-base64"
    ]
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/socket.ts",
    "docs": "### Interface: `PromiseExecutor`\n\nStores function references for resolve/reject with a DOM Promise.\n\n\n  - resolve: (value?: any) => void\n  - reject: (reason?: any) => void\n\n### Interface: `Presence`\n\nAn object which represents a connected user in the server.\n\n\n  - user_id: string\n    \n    The id of the user.\n    \n  - session_id: string\n    \n    The session id of the user.\n    \n  - username: string\n    \n    The username of the user.\n    \n  - node: string\n    \n    The node the user is connected to.\n    \n\n### Interface: `Channel`\n\nA response from a channel join operation.\n\n\n  - id: string\n    \n    The server-assigned channel id.\n    \n  - presences: Presence[]\n    \n    The presences visible on the chat channel.\n    \n  - self: Presence\n    \n    The presence of the current user, i.e. yourself.\n    \n\n### Interface: `ChannelJoin`\n\nJoin a realtime chat channel.\n\n\n  - channel_join: {\n        /** The name of the channel to join. */\n        target: string;\n        /** The channel type: 1 = Room, 2 = Direct Message, 3 = Group. */\n        type: number;\n        /** Whether channel messages are persisted in the database. */\n        persistence: boolean;\n        /** Whether the user's channel presence is hidden when joining. */\n        hidden: boolean;\n    }\n\n### Interface: `ChannelLeave`\n\nLeave a realtime chat channel.\n\n\n  - channel_leave: {\n        /** The id of the channel to leave. */\n        channel_id: string;\n    }\n\n### Interface: `ChannelMessage`\n\nAn incoming message on a realtime chat channel.\n\n\n  - channel_id: string\n    \n    The channel this message belongs to.\n    \n  - message_id: string\n    \n    The unique ID of this message.\n    \n  - code: number\n    \n    The unique ID of this message.\n    \n  - sender_id: string\n    \n    Message sender, usually a user ID.\n    \n  - username: string\n    \n    The username of the message sender, if any.\n    \n  - content: any\n    \n    The content payload.\n    \n  - create_time: string\n    \n    The UNIX time when the message was created.\n    \n  - update_time: string\n    \n    The UNIX time when the message was last updated.\n    \n  - persistent: boolean\n    \n    True if the message was persisted to the channel's history, false otherwise.\n    \n  - group_id: string\n    \n    The ID of the group, or an empty string if this message was not sent through a group channel.\n    \n  - room_name: string\n    \n    The name of the chat room, or an empty string if this message was not sent through a chat room.\n    \n  - user_id_one: string\n    \n    The ID of the first DM user, or an empty string if this message was not sent through a DM chat.\n    \n  - user_id_two: string\n    \n    The ID of the second DM user, or an empty string if this message was not sent through a DM chat.\n    \n\n### Interface: `ChannelMessageAck`\n\nAn acknowledgement received in response to sending a message on a chat channel.\n\n\n  - channel_id: string\n    \n    The server-assigned channel ID.\n    \n  - message_id: string\n    \n    A unique ID for the chat message.\n    \n  - code: number\n    \n    A user-defined code for the chat message.\n    \n  - username: string\n    \n    The username of the sender of the message.\n    \n  - create_time: string\n    \n    The UNIX time when the message was created.\n    \n  - update_time: string\n    \n    The UNIX time when the message was updated.\n    \n  - persistence: boolean\n    \n    True if the chat message has been stored in history.\n    \n\n### Interface: `ChannelMessageSend`\n\nSend a message to a realtime chat channel.\n\n\n  - channel_message_send: {\n        /** The server-assigned channel ID. */\n        channel_id: string;\n        /** The content payload. */\n        content: any;\n    }\n\n### Interface: `ChannelMessageUpdate`\n\nUpdate a message previously sent to a realtime chat channel.\n\n\n  - channel_message_update: {\n        /** The server-assigned channel ID. */\n        channel_id: string;\n        /** A unique ID for the chat message to be updated. */\n        message_id: string;\n        /** The content payload. */\n        content: any;\n    }\n\n### Interface: `ChannelMessageRemove`\n\nRemove a message previously sent to a realtime chat channel.\n\n\n  - channel_message_remove: {\n        /** The server-assigned channel ID. */\n        channel_id: string;\n        /** A unique ID for the chat message to be removed. */\n        message_id: string;\n    }\n\n### Interface: `ChannelPresenceEvent`\n\nPresence update for a particular realtime chat channel.\n\n\n  - channel_id: string\n    \n    The unique identifier of the chat channel.\n    \n  - joins: Presence[]\n    \n    Presences of the users who joined the channel.\n    \n  - leaves: Presence[]\n    \n    Presences of users who left the channel.\n    \n\n### Interface: `StreamId`\n\nStream identifier\n\n\n  - mode: number\n    \n    The type of stream (e.g. chat).\n    \n  - subject: string\n    \n    The primary stream subject, usually a user id.\n    \n  - subcontext: string\n    \n    A secondary stream subject, for example for a direct chat.\n    \n  - label: string\n    \n    Meta-information (e.g. chat room name).\n    \n\n### Interface: `StreamData`\n\nStream data.\n\n\n  - stream: StreamId\n    \n    The stream identifier.\n    \n  - sender?: Presence\n    \n    A reference to the user presence that sent this data, if any.\n    \n  - data: string\n    \n    Arbitrary contents of the data message.\n    \n  - reliable?: boolean\n    \n    True if this data was delivered reliably.\n    \n\n### Interface: `StreamPresenceEvent`\n\nPresence updates.\n\n\n  - stream: StreamId\n    \n    The stream identifier.\n    \n  - joins: Presence[]\n    \n    Presences of users who joined the stream.\n    \n  - leaves: Presence[]\n    \n    Presences of users who left the stream.\n    \n\n### Interface: `MatchPresenceEvent`\n\nMatch presence updates.\n\n\n  - match_id: string\n    \n    The unique match identifier.\n    \n  - joins: Presence[]\n    \n    Presences of users who joined the match.\n    \n  - leaves: Presence[]\n    \n    Presences of users who left the match.\n    \n\n### Interface: `MatchmakerAdd`\n\nStart a matchmaking process.\n\n\n  - matchmaker_add: {\n        /** The minimum number of opponents for a successful match. */\n        min_count: number;\n        /** The maximum number of opponents for a successful match. */\n        max_count: number;\n        /** Criteria for eligible opponents. Use wildcard '*' for any. */\n        query: string;\n        /** Key-value pairs describing the user (e.g. region). */\n        string_properties?: Record<string, string>;\n        /** Key-value pairs describing the user (e.g. rank). */\n        numeric_properties?: Record<string, number>;\n    }\n\n### Interface: `MatchmakerTicket`\n\nThe matchmaker ticket received from the server.\n\n\n  - ticket: string\n    \n    The ticket generated by the matchmaker.\n    \n\n### Interface: `MatchmakerRemove`\n\nCancel a matchmaking process.\n\n\n  - matchmaker_remove: {\n        /** The matchmaker ticket to be removed. */\n        ticket: string;\n    }\n\n### Interface: `MatchmakerUser`\n\nA reference to a user and their matchmaking properties.\n\n\n  - presence: Presence\n    \n    User information for the user being matched.\n    \n  - party_id: string\n    \n    Party identifier, if this user was matched as a party member.\n    \n  - string_properties?: Record<string, string>\n    \n    String properties describing the user.\n    \n  - numeric_properties?: Record<string, number>\n    \n    Numeric properties describing the user.\n    \n\n### Interface: `MatchmakerMatched`\n\nThe result of a successful matchmaker operation sent to the server.\n\n\n  - ticket: string\n    \n    The ticket sent by the server when the user requested to matchmake for other players.\n    \n  - match_id: string\n    \n    A match ID used to join the match.\n    \n  - token: string\n    \n    The token used to join a match.\n    \n  - users: MatchmakerUser[]\n    \n    The other users matched with this user and the parameters they sent.\n    \n  - self: MatchmakerUser\n    \n    The current user who matched with opponents.\n    \n\n### Interface: `Match`\n\nA realtime multiplayer match.\n\n\n  - match_id: string\n    \n    The unique match identifier.\n    \n  - authoritative: boolean\n    \n    If this match has an authoritative handler on the server.\n    \n  - label?: string\n    \n    A label for the match which can be filtered on.\n    \n  - size: number\n    \n    The number of users currently in the match.\n    \n  - presences: Presence[]\n    \n    The presences already in the match.\n    \n  - self: Presence\n    \n    The current user in this match, i.e. yourself.\n    \n\n### Interface: `CreateMatch`\n\nCreate a multiplayer match.\n\n\n  - match_create: {\n        name?: string;\n    }\n\n### Interface: `JoinMatch`\n\nJoin a multiplayer match.\n\n\n  - match_join: {\n        /** The unique identifier of the match to join. */\n        match_id?: string;\n        /** The token used to join the match. */\n        token?: string;\n        /** An optional set of key-value metadata pairs to be passed to the match handler. */\n        metadata?: {};\n    }\n\n### Interface: `LeaveMatch`\n\nLeave a multiplayer match.\n\n\n  - match_leave: {\n        /** The unique identifier of the match to leave. */\n        match_id: string;\n    }\n\n### Interface: `MatchData`\n\nMatch data\n\n\n  - match_id: string\n    \n    The unique match identifier.\n    \n  - op_code: number\n    \n    Operation code value.\n    \n  - data: Uint8Array\n    \n    Data payload, if any.\n    \n  - presence?: Presence\n    \n    A reference to the user presence that sent this data, if any.\n    \n  - reliable?: boolean\n    \n    True if this data was delivered reliably.\n    \n\n### Interface: `MatchDataSend`\n\nSend a message that contains match data.\n\n\n  - match_data_send: {\n        /** The unique match identifier. */\n        match_id: string;\n        /** Operation code value. */\n        op_code: number;\n        /** Data payload, if any. */\n        data: string | Uint8Array;\n        /** A reference to the user presences to send this data to, if any. */\n        presences: Presence[];\n        /** True if the data should be sent reliably. */\n        reliable?: boolean;\n    }\n\n### Interface: `Party`\n\nIncoming information about a party.\n\n\n  - party_id: string\n    \n    The unique party identifier.\n    \n  - open: boolean\n    \n    True, if the party is open to join.\n    \n  - max_size: number\n    \n    The maximum number of party members.\n    \n  - self: Presence\n    \n    The current user in this party, i.e. yourself.\n    \n  - leader: Presence\n    \n    The current party leader.\n    \n  - presences: Presence[]\n    \n    All members currently in the party.\n    \n\n### Interface: `PartyCreate`\n\nCreate a party.\n\n\n  - party_create: {\n        /** True, if the party is open to join. */\n        open: boolean;\n        /** The maximum number of party members. */\n        max_size: number;\n    }\n\n### Interface: `PartyJoin`\n\nJoin a party.\n\n\n  - party_join: {\n        /** The unique party identifier. */\n        party_id: string;\n    }\n\n### Interface: `PartyLeave`\n\nLeave a party.\n\n\n  - party_leave: {\n        /** The unique party identifier. */\n        party_id: string;\n    }\n\n### Interface: `PartyPromote`\n\nPromote a new party leader.\n\n\n  - party_promote: {\n        /** The unique party identifier. */\n        party_id: string;\n        /** The user presence being promoted to leader. */\n        presence: Presence;\n    }\n\n### Interface: `PartyLeader`\n\nAnnouncement of a new party leader.\n\n\n  - party_id: string\n    \n    The unique party identifier.\n    \n  - presence: Presence\n    \n    The presence of the new party leader.\n    \n\n### Interface: `PartyAccept`\n\nAccept a request to join.\n\n\n  - party_accept: {\n        /** The unique party identifier. */\n        party_id: string;\n        /** The presence being accepted to join the party. */\n        presence: Presence;\n    }\n\n### Interface: `PartyClose`\n\nEnd a party, kicking all party members and closing it.\n\n\n  - party_close: {\n        /** The unique party identifier. */\n        party_id: string;\n    }\n\n### Interface: `PartyData`\n\nIncoming party data delivered from the server.\n\n\n  - party_id: string\n    \n    The unique party identifier.\n    \n  - presence: Presence\n    \n    A reference to the user presence that sent this data, if any.\n    \n  - op_code: number\n    \n    The operation code the message was sent with.\n    \n  - data: Uint8Array\n    \n    Data payload, if any.\n    \n\n### Interface: `PartyDataSend`\n\nA client to server request to send data to a party.\n\n\n  - party_data_send: {\n        /** The unique party identifier. */\n        party_id: string;\n        /** The operation code the message was sent with. */\n        op_code: number;\n        /** Data payload, if any. */\n        data: string | Uint8Array;\n    }\n\n### Interface: `PartyJoinRequest`\n\nIncoming notification for one or more new presences attempting to join the party.\n\n\n  - party_id: string\n    \n    The ID of the party to get a list of join requests for.\n    \n  - presences: Presence[]\n    \n    Presences attempting to join, or who have joined.\n    \n\n### Interface: `PartyJoinRequestList`\n\nRequest a list of pending join requests for a party.\n\n\n  - party_join_request_list: {\n        /** The ID of the party to get a list of join requests for. */\n        party_id: string;\n    }\n\n### Interface: `PartyMatchmakerAdd`\n\nBegin matchmaking as a party.\n\n\n  - party_matchmaker_add: {\n        /** The ID of the party to create a matchmaker ticket for. */\n        party_id: string;\n        /** Minimum total user count to match together. */\n        min_count: number;\n        /** Maximum total user count to match together. */\n        max_count: number;\n        /** Filter query used to identify suitable users. */\n        query: string;\n        /** String properties describing the party (e.g. region). */\n        string_properties?: Record<string, string>;\n        /** Numeric properties describing the party (e.g. rank). */\n        numeric_properties?: Record<string, number>;\n    }\n\n### Interface: `PartyMatchmakerRemove`\n\nCancel a party matchmaking process using a ticket.\n\n\n  - party_matchmaker_remove: {\n        /** The ID of the party to cancel a matchmaker ticket for. */\n        party_id: string;\n        /** The ticket to remove. */\n        ticket: string;\n    }\n\n### Interface: `PartyMatchmakerTicket`\n\nA response from starting a new party matchmaking process.\n\n\n  - party_id: string\n    \n    The ID of the party.\n    \n  - ticket: string\n    \n    The matchmaker ticket created.\n    \n\n### Interface: `PartyPresenceEvent`\n\nPresence update for a particular party.\n\n\n  - party_id: string\n    \n    The ID of the party.\n    \n  - joins: Presence[]\n    \n    The user presences that have just joined the party.\n    \n  - leaves: Presence[]\n    \n    The user presences that have just left the party.\n    \n\n### Interface: `PartyRemove`\n\nKick a party member, or decline a request to join.\n\n\n  - party_remove: {\n        /** The ID of the party to remove/reject from. */\n        party_id: string;\n        /** The presence to remove/reject. */\n        presence: Presence;\n    }\n\n### Interface: `Rpc`\n\nExecute an Lua function on the server.\n\n\n  - rpc: ApiRpc\n\n### Interface: `Ping`\n\nApplication-level heartbeat ping.\n\n\n\n### Interface: `Status`\n\nA snapshot of statuses for some set of users.\n\n\n  - presences: Presence[]\n    \n    The user presences to view statuses of.\n    \n\n### Interface: `StatusFollow`\n\nStart receiving status updates for some set of users.\n\n\n  - status_follow: { user_ids: string[] }\n    \n    The IDs of the users to follow.\n    \n\n### Interface: `StatusPresenceEvent`\n\nA batch of status updates for a given user.\n\n\n  - joins: Presence[]\n    \n    This join information is in response to a subscription made to be notified when a user comes online.\n    \n  - leaves: Presence[]\n    \n    This join information is in response to a subscription made to be notified when a user goes offline.\n    \n\n### Interface: `StatusUnfollow`\n\nStop receiving status updates for some set of users.\n\n\n  - status_unfollow: { user_ids: string[] }\n    \n    The IDs of user to unfollow.\n    \n\n### Interface: `StatusUpdate`\n\nSet the user's own status.\n\n\n  - status_update: { status?: string }\n    \n    Status string to set, if not present the user will appear offline.\n    \n\n### Interface: `Socket`\n\nA socket connection to Nakama server.\n\n\n  - ondisconnect: (evt: Event) => void\n    \n    Handle disconnect events received from the socket.\n    \n  - onerror: (evt: Event) => void\n    \n    Handle error events received from the socket.\n    \n  - onnotification: (notification: Notification) => void\n    \n    Receive notifications from the socket.\n    \n  - onmatchdata: (matchData: MatchData) => void\n    \n    Receive match data updates.\n    \n  - onmatchpresence: (matchPresence: MatchPresenceEvent) => void\n    \n    Receive match presence updates.\n    \n  - onmatchmakerticket: (matchmakerTicket: MatchmakerTicket) => void\n    \n    Receive a matchmaker ticket.\n    \n  - onmatchmakermatched: (matchmakerMatched: MatchmakerMatched) => void\n    \n    Receive matchmaking results.\n    \n  - onparty: (party: Party) => void\n    \n    Receive party events.\n    \n  - onpartyclose: (partyClose: PartyClose) => void\n    \n    Receive party close events.\n    \n  - onpartydata: (partyData: PartyData) => void\n    \n    Receive party data updates.\n    \n  - onpartyjoinrequest: (partyJoinRequest: PartyJoinRequest) => void\n    \n    Receive party join requests, if party leader.\n    \n  - onpartyleader: (partyLeader: PartyLeader) => void\n    \n    Receive announcements of a new party leader.\n    \n  - onpartypresence: (partyPresence: PartyPresenceEvent) => void\n    \n    Receive a presence update for a party.\n    \n  - onpartymatchmakerticket: (\n        partyMatchmakerMatched: PartyMatchmakerTicket\n    ) => void\n    \n    Receive matchmaking results.\n    \n  - onstatuspresence: (statusPresence: StatusPresenceEvent) => void\n    \n    Receive status presence updates.\n    \n  - onstreampresence: (streamPresence: StreamPresenceEvent) => void\n    \n    Receive stream presence updates.\n    \n  - onstreamdata: (streamData: StreamData) => void\n    \n    Receive stream data.\n    \n  - onheartbeattimeout: () => void\n    \n    An application-level heartbeat timeout that fires after the client does not receive a pong from the server after the heartbeat interval.\n    Most browsers maintain an internal heartbeat, in which case its unlikely you'll need to use this callback. However, Chrome does not implement an internal heartbeat.\n    We fire this separately from `onclose` because heartbeats fail when there's no connectivity, and many browsers don't fire `onclose` until the closing handshake either succeeds or fails.\n    In any case, be aware that `onclose` will still fire if there is a heartbeat timeout in a potentially delayed manner.\n    \n  - onchannelmessage: (channelMessage: ChannelMessage) => void\n    \n    Receive channel message.\n    \n  - onchannelpresence: (channelPresence: ChannelPresenceEvent) => void\n    \n    Receive channel presence updates.\n    \n\n### Interface: `SocketError`\n\nReports an error received from a socket message.\n\n\n  - code: number\n    \n    The error code.\n    \n  - message: string\n    \n    A message in English to help developers debug the response.\n    \n\n### Class: `DefaultSocket`\n\nA socket connection to Nakama server implemented with the DOM's WebSocket API.\n\n\n  - Property: `DefaultHeartbeatTimeoutMs: any`\n  - Property: `DefaultSendTimeoutMs: any`\n  - Property: `DefaultConnectTimeoutMs: any`\n  - Property: `cIds: { [key: string]: PromiseExecutor }`\n  - Property: `nextCid: number`\n  - Property: `_heartbeatTimeoutMs: number`\n  - Constructor: `constructor(host: string, port: string, useSSL: boolean, verbose: boolean, adapter: WebSocketAdapter, sendTimeoutMs: number): void`\n    - Parameter: `host: string`\n    - Parameter: `port: string`\n    - Parameter: `useSSL: boolean`\n    - Parameter: `verbose: boolean`\n    - Parameter: `adapter: WebSocketAdapter`\n    - Parameter: `sendTimeoutMs: number`\n  - Method: `generatecid(): string`\n  - Method: `connect(session: Session, createStatus: boolean, connectTimeoutMs: number): Promise<Session>`\n    \n    Connect to the server.\n    \n  - Method: `disconnect(fireDisconnectEvent: boolean): void`\n    \n    Disconnect from the server.\n    \n  - Method: `setHeartbeatTimeoutMs(ms: number): void`\n  - Method: `getHeartbeatTimeoutMs(): number`\n  - Method: `ondisconnect(evt: Event): void`\n    \n    Handle disconnect events received from the socket.\n    \n  - Method: `onerror(evt: Event): void`\n    \n    Handle error events received from the socket.\n    \n  - Method: `onchannelmessage(channelMessage: ChannelMessage): void`\n    \n    Receive channel message.\n    \n  - Method: `onchannelpresence(channelPresence: ChannelPresenceEvent): void`\n    \n    Receive channel presence updates.\n    \n  - Method: `onnotification(notification: Notification): void`\n    \n    Receive notifications from the socket.\n    \n  - Method: `onmatchdata(matchData: MatchData): void`\n    \n    Receive match data updates.\n    \n  - Method: `onmatchpresence(matchPresence: MatchPresenceEvent): void`\n    \n    Receive match presence updates.\n    \n  - Method: `onmatchmakerticket(matchmakerTicket: MatchmakerTicket): void`\n    \n    Receive a matchmaker ticket.\n    \n  - Method: `onmatchmakermatched(matchmakerMatched: MatchmakerMatched): void`\n    \n    Receive matchmaking results.\n    \n  - Method: `onparty(party: Party): void`\n    \n    Receive party events.\n    \n  - Method: `onpartyclose(close: PartyClose): void`\n    \n    Receive party close events.\n    \n  - Method: `onpartyjoinrequest(partyJoinRequest: PartyJoinRequest): void`\n    \n    Receive party join requests, if party leader.\n    \n  - Method: `onpartydata(partyData: PartyData): void`\n    \n    Receive party data updates.\n    \n  - Method: `onpartyleader(partyLeader: PartyLeader): void`\n    \n    Receive announcements of a new party leader.\n    \n  - Method: `onpartymatchmakerticket(partyMatched: PartyMatchmakerTicket): void`\n    \n    Receive matchmaking results.\n    \n  - Method: `onpartypresence(partyPresence: PartyPresenceEvent): void`\n    \n    Receive a presence update for a party.\n    \n  - Method: `onstatuspresence(statusPresence: StatusPresenceEvent): void`\n    \n    Receive status presence updates.\n    \n  - Method: `onstreampresence(streamPresence: StreamPresenceEvent): void`\n    \n    Receive stream presence updates.\n    \n  - Method: `onstreamdata(streamData: StreamData): void`\n    \n    Receive stream data.\n    \n  - Method: `onheartbeattimeout(): void`\n    \n    An application-level heartbeat timeout that fires after the client does not receive a pong from the server after the heartbeat interval.\n    Most browsers maintain an internal heartbeat, in which case its unlikely you'll need to use this callback. However, Chrome does not implement an internal heartbeat.\n    We fire this separately from `onclose` because heartbeats fail when there's no connectivity, and many browsers don't fire `onclose` until the closing handshake either succeeds or fails.\n    In any case, be aware that `onclose` will still fire if there is a heartbeat timeout in a potentially delayed manner.\n    \n  - Method: `send(message: | ChannelJoin\n            | ChannelLeave\n            | ChannelMessageSend\n            | ChannelMessageUpdate\n            | ChannelMessageRemove\n            | CreateMatch\n            | JoinMatch\n            | LeaveMatch\n            | MatchDataSend\n            | MatchmakerAdd\n            | MatchmakerRemove\n            | PartyAccept\n            | PartyClose\n            | PartyCreate\n            | PartyDataSend\n            | PartyJoin\n            | PartyJoinRequestList\n            | PartyLeave\n            | PartyMatchmakerAdd\n            | PartyMatchmakerRemove\n            | PartyPromote\n            | PartyRemove\n            | Rpc\n            | StatusFollow\n            | StatusUnfollow\n            | StatusUpdate\n            | Ping, sendTimeout: any): Promise<any>`\n  - Method: `acceptPartyMember(party_id: string, presence: Presence): Promise<void>`\n    \n    Accept a request to join.\n    \n  - Method: `addMatchmaker(query: string, min_count: number, max_count: number, string_properties?: Record<string, string>, numeric_properties?: Record<string, number>): Promise<MatchmakerTicket>`\n    \n    Join the matchmaker pool and search for opponents on the server.\n    \n  - Method: `addMatchmakerParty(party_id: string, query: string, min_count: number, max_count: number, string_properties?: Record<string, string>, numeric_properties?: Record<string, number>): Promise<PartyMatchmakerTicket>`\n    \n    Begin matchmaking as a party.\n    \n  - Method: `closeParty(party_id: string): Promise<void>`\n    \n    End a party, kicking all party members and closing it.\n    \n  - Method: `createMatch(name?: string): Promise<Match>`\n    \n    Create a multiplayer match on the server.\n    \n  - Method: `createParty(open: boolean, max_size: number): Promise<Party>`\n    \n    Create a party.\n    \n  - Method: `followUsers(userIds: string[]): Promise<Status>`\n    \n    Subscribe to one or more users for their status updates.\n    \n  - Method: `joinChat(target: string, type: number, persistence: boolean, hidden: boolean): Promise<Channel>`\n    \n    Join a chat channel on the server.\n    \n  - Method: `joinMatch(match_id?: string, token?: string, metadata?: {}): Promise<Match>`\n    \n    Join a multiplayer match.\n    \n  - Method: `joinParty(party_id: string): Promise<void>`\n    \n    Join a party.\n    \n  - Method: `leaveChat(channel_id: string): Promise<void>`\n    \n    Leave a chat channel on the server.\n    \n  - Method: `leaveMatch(matchId: string): Promise<void>`\n    \n    Leave a multiplayer match on the server.\n    \n  - Method: `leaveParty(party_id: string): Promise<void>`\n    \n    Leave a party.\n    \n  - Method: `listPartyJoinRequests(party_id: string): Promise<PartyJoinRequest>`\n    \n    Request a list of pending join requests for a party.\n    \n  - Method: `promotePartyMember(party_id: string, party_member: Presence): Promise<PartyLeader>`\n    \n    Promote a new party leader.\n    \n  - Method: `removeChatMessage(channel_id: string, message_id: string): Promise<ChannelMessageAck>`\n    \n    Remove a chat message from a chat channel on the server.\n    \n  - Method: `removeMatchmaker(ticket: string): Promise<void>`\n    \n    Leave the matchmaker pool with the provided ticket.\n    \n  - Method: `removeMatchmakerParty(party_id: string, ticket: string): Promise<void>`\n    \n    Cancel a party matchmaking process using a ticket.\n    \n  - Method: `removePartyMember(party_id: string, member: Presence): Promise<void>`\n    \n    Kick a party member, or decline a request to join.\n    \n  - Method: `rpc(id?: string, payload?: string, http_key?: string): Promise<ApiRpc>`\n    \n    Execute an RPC function to the server.\n    \n  - Method: `sendMatchState(matchId: string, opCode: number, data: string | Uint8Array, presences?: Presence[], reliable?: boolean): Promise<void>`\n    \n    When no presences are supplied the new match state will be sent to all presences.\n    \n  - Method: `sendPartyData(party_id: string, op_code: number, data: string | Uint8Array): Promise<void>`\n    \n    Send data to a party.\n    \n  - Method: `unfollowUsers(user_ids: string[]): Promise<void>`\n    \n    Unfollow one or more users from their status updates.\n    \n  - Method: `updateChatMessage(channel_id: string, message_id: string, content: any): Promise<ChannelMessageAck>`\n    \n    Update a chat message on a chat channel in the server.\n    \n  - Method: `updateStatus(status?: string): Promise<void>`\n    \n    Update the status for the current user online.\n    \n  - Method: `writeChatMessage(channel_id: string, content: any): Promise<ChannelMessageAck>`\n    \n    Send a chat message to a chat channel on the server.\n    \n  - Method: `pingPong(): Promise<void>`\n",
    "hash": "e87e35685987093dd9f70d8efe623895",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "js-base64"
    ]
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/tokens.ts",
    "docs": "",
    "hash": "affbf47360140f03a60dd822da2d1d60",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/types.ts",
    "docs": "### Interface: `Notification`\n\nA notification in the server.\n\n\n  - code?: number\n    \n    Category code for this notification.\n    \n  - content?: {}\n    \n    Content of the notification in JSON.\n    \n  - create_time?: string\n    \n    The UNIX time when the notification was created.\n    \n  - id?: string\n    \n    ID of the Notification.\n    \n  - persistent?: boolean\n    \n    True if this notification was persisted to the database.\n    \n  - sender_id?: string\n    \n    ID of the sender, if a user. Otherwise 'null'.\n    \n  - subject?: string\n    \n    Subject of the notification.\n    \n",
    "hash": "96fdbacc3f7bd04fd45e615337bc64f6",
    "category": "types",
    "tags": [
      "interface",
      "types",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/utils.ts",
    "docs": "### Function: `buildFetchOptions(method: string, options: any, bodyJson: string): void`\n### Function: `b64EncodeUnicode(str: string): void`\n### Function: `b64DecodeUnicode(str: string): void`",
    "hash": "c7c8fd1d2073224b4883a18aae41d182",
    "category": "utility",
    "tags": [
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "js-base64"
    ]
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "src/web_socket_adapter.ts",
    "docs": "### Interface: `WebSocketAdapter`\n\nAn interface used by Nakama's web socket to determine the payload protocol.\n\n\n  - onClose: SocketCloseHandler | null\n    \n    Dispatched when the web socket closes.\n    \n  - onError: SocketErrorHandler | null\n    \n    Dispatched when the web socket receives an error.\n    \n  - onMessage: SocketMessageHandler | null\n    \n    Dispatched when the web socket receives a normal message.\n    \n  - onOpen: SocketOpenHandler | null\n    \n    Dispatched when the web socket opens.\n    \n\n### Interface: `SocketCloseHandler`\n\nSocketCloseHandler defines a lambda that handles WebSocket close events.\n\n\n\n### Interface: `SocketErrorHandler`\n\nSocketErrorHandler defines a lambda that handles responses from the server via WebSocket\nthat indicate an error.\n\n\n\n### Interface: `SocketMessageHandler`\n\nSocketMessageHandler defines a lambda that handles valid WebSocket messages.\n\n\n\n### Interface: `SocketOpenHandler`\n\nSocketOpenHandler defines a lambda that handles WebSocket open events.\n\n\n\n### Class: `WebSocketAdapterText`\n\nA text-based socket adapter that accepts and transmits payloads over UTF-8.\n\n\n  - Property: `_socket: WebSocket`\n  - Method: `isOpen(): boolean`\n  - Method: `connect(scheme: string, host: string, port: string, createStatus: boolean, token: string): void`\n  - Method: `close(): void`\n  - Method: `send(msg: any): void`\n",
    "hash": "4c00f1563a258292878dbbdf3d8ae61f",
    "category": "interface",
    "tags": [
      "interface",
      "types",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core",
      "base64-arraybuffer",
      "js-base64"
    ]
  },
  {
    "package_name": "@decopro/nakama",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/orm",
    "package_version": "1.1.0",
    "filename": "src/__tests__/decorator.test.ts",
    "docs": "",
    "hash": "d7639efd8d7a05dd36d1344a5b632b70",
    "category": "test",
    "tags": [
      "test",
      "entity",
      "database",
      "column",
      "relationship",
      "class"
    ],
    "examples": [
      "// Test: should apply Entity decorator with default options\nexpect(() => {\n                @Entity()\n                class TestEntity {\n                    id: number;\n                }",
      "// Test: should apply Entity decorator with custom options\nexpect(() => {\n                @Entity({\n                    tableName: \"custom_table\",\n                    schema: \"public\",\n                    comment: \"Test entity\"",
      "// Test: should work with createEntity factory\nexpect(() => {\n                class TestEntity {\n                    id: number;\n                }\n\n                const EntityClass = createEntity(TestEntity, {\n                    tableName: \"test_table\"",
      "// Test: should apply Column decorator\nexpect(() => {\n                class TestEntity {\n                    @Column()\n                    name: string;\n\n                    @Column({ type: ColumnType.VARCHAR, length: 100, nullable: false })\n                    email: string;\n                }",
      "// Test: should apply PrimaryColumn decorator\nexpect(() => {\n                class TestEntity {\n                    @PrimaryColumn()\n                    id: number;\n\n                    @PrimaryColumn({ type: ColumnType.VARCHAR, length: 36 })\n                    uuid: string;\n                }",
      "// Test: should apply PrimaryGeneratedColumn decorator\nexpect(() => {\n                class TestEntity {\n                    @PrimaryGeneratedColumn()\n                    id: number;\n\n                    @PrimaryGeneratedColumn({ strategy: \"uuid\" })\n                    uuid: string;\n                }",
      "// Test: should apply OneToOne decorator\nexpect(() => {\n                class TestEntity {\n                    @OneToOne(() => Profile)\n                    profile: Profile;\n\n                    @OneToOne(() => User, { cascade: true })\n                    user: User;\n                }",
      "// Test: should apply OneToMany decorator\nexpect(() => {\n                class TestEntity {\n                    @OneToMany(() => Post, { mappedBy: \"author\" })\n                    posts: Post[];\n                }",
      "// Test: should apply ManyToOne decorator\nexpect(() => {\n                class TestEntity {\n                    @ManyToOne(() => User, { joinColumn: \"author_id\" })\n                    author: User;\n                }",
      "// Test: should apply ManyToMany decorator\nexpect(() => {\n                class TestEntity {\n                    @ManyToMany(() => Role, { joinTable: \"user_roles\" })\n                    roles: Role[];\n                }",
      "// Test: should apply Index decorator\nexpect(() => {\n                class TestEntity {\n                    @Index()\n                    @Column()\n                    email: string;\n\n                    @Index({ unique: true, name: \"idx_username\" })\n                    @Column()\n                    username: string;\n                }",
      "// Test: should apply Unique decorator\nexpect(() => {\n                class TestEntity {\n                    @Unique()\n                    @Column()\n                    email: string;\n\n                    @Unique({ name: \"uq_phone\" })\n                    @Column()\n                    phone: string;\n                }",
      "// Test: should get table name\nclass TestEntity {}\n            expect(getTableName(TestEntity)).toBe(\"testentity\");",
      "// Test: should get entity columns (placeholder)\nclass TestEntity {}\n            expect(getEntityColumns(TestEntity)).toEqual([]);",
      "// Test: should get entity relations (placeholder)\nclass TestEntity {}\n            expect(getEntityRelations(TestEntity)).toEqual([]);",
      "// Test: should have correct ColumnType values\nexpect(ColumnType.INT).toBe(\"int\");\n            expect(ColumnType.VARCHAR).toBe(\"varchar\");\n            expect(ColumnType.TEXT).toBe(\"text\");\n            expect(ColumnType.BOOLEAN).toBe(\"boolean\");\n            expect(ColumnType.JSON).toBe(\"json\");",
      "// Test: should have correct RelationType values\nexpect(RelationType.ONE_TO_ONE).toBe(\"one-to-one\");\n            expect(RelationType.ONE_TO_MANY).toBe(\"one-to-many\");\n            expect(RelationType.MANY_TO_ONE).toBe(\"many-to-one\");\n            expect(RelationType.MANY_TO_MANY).toBe(\"many-to-many\");",
      "// Test: should have correct IndexType values\nexpect(IndexType.PRIMARY).toBe(\"primary\");\n            expect(IndexType.UNIQUE).toBe(\"unique\");\n            expect(IndexType.INDEX).toBe(\"index\");\n            expect(IndexType.FULLTEXT).toBe(\"fulltext\");",
      "// Test: should have correct CascadeType values\nexpect(CascadeType.PERSIST).toBe(\"persist\");\n            expect(CascadeType.REMOVE).toBe(\"remove\");\n            expect(CascadeType.UPDATE).toBe(\"update\");\n            expect(CascadeType.ALL).toBe(\"all\");",
      "// Test: should have correct FetchType values\nexpect(FetchType.LAZY).toBe(\"lazy\");\n            expect(FetchType.EAGER).toBe(\"eager\");"
    ],
    "dependencies": []
  },
  {
    "package_name": "@decopro/orm",
    "package_version": "1.1.0",
    "filename": "src/decorator.ts",
    "docs": "### Enum: `ColumnType`\n\n数据库列类型枚举\n\n\n  - Member: `INT`\n  - Member: `BIGINT`\n  - Member: `FLOAT`\n  - Member: `DOUBLE`\n  - Member: `DECIMAL`\n  - Member: `VARCHAR`\n  - Member: `TEXT`\n  - Member: `CHAR`\n  - Member: `DATE`\n  - Member: `TIME`\n  - Member: `DATETIME`\n  - Member: `TIMESTAMP`\n  - Member: `BOOLEAN`\n  - Member: `JSON`\n  - Member: `JSONB`\n  - Member: `BLOB`\n  - Member: `BINARY`\n### Enum: `RelationType`\n\n关系类型枚举\n\n\n  - Member: `ONE_TO_ONE`\n  - Member: `ONE_TO_MANY`\n  - Member: `MANY_TO_ONE`\n  - Member: `MANY_TO_MANY`\n### Enum: `IndexType`\n\n索引类型枚举\n\n\n  - Member: `PRIMARY`\n  - Member: `UNIQUE`\n  - Member: `INDEX`\n  - Member: `FULLTEXT`\n  - Member: `SPATIAL`\n### Enum: `CascadeType`\n\n级联操作类型\n\n\n  - Member: `PERSIST`\n  - Member: `REMOVE`\n  - Member: `UPDATE`\n  - Member: `REFRESH`\n  - Member: `ALL`\n### Enum: `FetchType`\n\n获取策略\n\n\n  - Member: `LAZY`\n  - Member: `EAGER`\n### Interface: `EntityOptions`\n\n实体装饰器选项\n\n\n  - tableName?: string\n    \n    表名，如果不指定则使用类名\n    \n  - schema?: string\n    \n    数据库模式名\n    \n  - abstract?: boolean\n    \n    是否为抽象实体（不创建表）\n    \n  - comment?: string\n    \n    表注释\n    \n  - engine?: string\n    \n    表引擎（MySQL）\n    \n  - charset?: string\n    \n    字符集\n    \n  - collation?: string\n    \n    排序规则\n    \n\n### Interface: `BaseColumnOptions`\n\n基础列选项\n\n\n  - name?: string\n    \n    列名，如果不指定则使用属性名\n    \n  - type?: ColumnType | string\n    \n    列类型\n    \n  - length?: number\n    \n    列长度\n    \n  - precision?: number\n    \n    精度（用于 decimal 类型）\n    \n  - scale?: number\n    \n    小数位数（用于 decimal 类型）\n    \n  - nullable?: boolean\n    \n    是否可为空\n    \n  - default?: any\n    \n    默认值\n    \n  - comment?: string\n    \n    列注释\n    \n  - charset?: string\n    \n    字符集\n    \n  - collation?: string\n    \n    排序规则\n    \n  - unsigned?: boolean\n    \n    是否为无符号数（MySQL）\n    \n  - zerofill?: boolean\n    \n    是否自动填充零（MySQL）\n    \n  - validator?: (value: any) => boolean | string\n    \n    数据验证器\n    \n  - zodValidator?: ZodTypeAny\n    \n    Zod 验证模式\n    \n\n### Interface: `ColumnOptions`\n\n普通列选项\n\n\n  - primary?: boolean\n    \n    是否为主键\n    \n  - unique?: boolean\n    \n    是否唯一\n    \n  - generated?: boolean | \"increment\" | \"uuid\" | \"rowid\"\n    \n    是否为生成列\n    \n  - generationStrategy?: \"increment\" | \"uuid\" | \"rowid\"\n    \n    生成策略\n    \n  - select?: boolean\n    \n    是否为选择列（查询时是否默认选择）\n    \n  - insert?: boolean\n    \n    是否为插入列（插入时是否包含）\n    \n  - update?: boolean\n    \n    是否为更新列（更新时是否包含）\n    \n  - enum?: string[] | Record<string, string | number>\n    \n    枚举值（用于 enum 类型）\n    \n  - array?: boolean\n    \n    数组类型（PostgreSQL）\n    \n\n### Interface: `PrimaryColumnOptions`\n\n主键列选项\n\n\n  - generated?: boolean | \"increment\" | \"uuid\" | \"rowid\"\n    \n    生成策略\n    \n\n### Interface: `PrimaryGeneratedColumnOptions`\n\n自增主键列选项\n\n\n  - strategy?: \"increment\" | \"uuid\" | \"rowid\"\n    \n    生成策略\n    \n\n### Interface: `BaseRelationOptions`\n\n基础关系选项\n\n\n  - type?: () => Function\n    \n    目标实体类型\n    \n  - eager?: boolean\n    \n    获取策略\n    \n  - cascade?: CascadeType[] | boolean\n    \n    级联操作\n    \n  - nullable?: boolean\n    \n    关系是否可为空\n    \n  - onDelete?: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\" | \"SET DEFAULT\"\n    \n    当目标实体被删除时的行为\n    \n  - onUpdate?: \"RESTRICT\" | \"CASCADE\" | \"SET NULL\" | \"NO ACTION\" | \"SET DEFAULT\"\n    \n    当目标实体被更新时的行为\n    \n\n### Interface: `OneToOneOptions`\n\n一对一关系选项\n\n\n  - joinColumn?: string\n    \n    外键列名\n    \n  - owner?: boolean\n    \n    是否为关系的拥有方\n    \n  - inverseSide?: string\n    \n    反向关系的属性名\n    \n\n### Function: `OneToOne(): PropertyDecorator`\n\nOneToOne 装饰器 - 用于标记一对一关系\n\n\n### Function: `OneToOne(type: () => Function, options?: Omit<OneToOneOptions, 'type'>): PropertyDecorator`\n\nOneToOne 装饰器 - 用于标记一对一关系\n\n\n### Function: `OneToOne(options: OneToOneOptions): PropertyDecorator`\n\nOneToOne 装饰器 - 用于标记一对一关系\n\n\n### Function: `OneToOne(typeOrOptions?: (() => Function) | OneToOneOptions, options?: Omit<OneToOneOptions, 'type'>): PropertyDecorator`\n\nOneToOne 装饰器 - 用于标记一对一关系\n\n\n### Interface: `OneToManyOptions`\n\n一对多关系选项\n\n\n  - mappedBy?: string\n    \n    反向关系的属性名\n    \n\n### Function: `OneToMany(): PropertyDecorator`\n\nOneToMany 装饰器 - 用于标记一对多关系\n\n\n### Function: `OneToMany(type: () => Function, options?: Omit<OneToManyOptions, 'type'>): PropertyDecorator`\n\nOneToMany 装饰器 - 用于标记一对多关系\n\n\n### Function: `OneToMany(options: OneToManyOptions): PropertyDecorator`\n\nOneToMany 装饰器 - 用于标记一对多关系\n\n\n### Function: `OneToMany(typeOrOptions?: (() => Function) | OneToManyOptions, options?: Omit<OneToManyOptions, 'type'>): PropertyDecorator`\n\nOneToMany 装饰器 - 用于标记一对多关系\n\n\n### Interface: `ManyToOneOptions`\n\n多对一关系选项\n\n\n  - joinColumn?: string\n    \n    外键列名\n    \n\n### Function: `ManyToOne(): PropertyDecorator`\n\nManyToOne 装饰器 - 用于标记多对一关系\n\n\n### Function: `ManyToOne(type: () => Function, options?: Omit<ManyToOneOptions, 'type'>): PropertyDecorator`\n\nManyToOne 装饰器 - 用于标记多对一关系\n\n\n### Function: `ManyToOne(options: ManyToOneOptions): PropertyDecorator`\n\nManyToOne 装饰器 - 用于标记多对一关系\n\n\n### Function: `ManyToOne(typeOrOptions?: (() => Function) | ManyToOneOptions, options?: Omit<ManyToOneOptions, 'type'>): PropertyDecorator`\n\nManyToOne 装饰器 - 用于标记多对一关系\n\n\n### Interface: `ManyToManyOptions`\n\n多对多关系选项\n\n\n  - joinTable?: string\n    \n    中间表名\n    \n  - joinColumn?: string\n    \n    当前实体的外键列名\n    \n  - inverseJoinColumn?: string\n    \n    目标实体的外键列名\n    \n  - mappedBy?: string\n    \n    反向关系的属性名\n    \n\n### Function: `ManyToMany(): PropertyDecorator`\n\nManyToMany 装饰器 - 用于标记多对多关系\n\n\n### Function: `ManyToMany(type: () => Function, options?: Omit<ManyToManyOptions, 'type'>): PropertyDecorator`\n\nManyToMany 装饰器 - 用于标记多对多关系\n\n\n### Function: `ManyToMany(options: ManyToManyOptions): PropertyDecorator`\n\nManyToMany 装饰器 - 用于标记多对多关系\n\n\n### Function: `ManyToMany(typeOrOptions?: (() => Function) | ManyToManyOptions, options?: Omit<ManyToManyOptions, 'type'>): PropertyDecorator`\n\nManyToMany 装饰器 - 用于标记多对多关系\n\n\n### Interface: `IndexOptions`\n\n索引选项\n\n\n  - name?: string\n    \n    索引名称\n    \n  - type?: IndexType\n    \n    索引类型\n    \n  - unique?: boolean\n    \n    是否唯一索引\n    \n  - columns?: string[]\n    \n    索引列（用于复合索引）\n    \n  - where?: string\n    \n    索引条件（部分索引）\n    \n  - using?: \"btree\" | \"hash\" | \"gist\" | \"gin\" | \"spgist\" | \"brin\"\n    \n    索引方法（PostgreSQL）\n    \n\n### Interface: `UniqueOptions`\n\n唯一索引选项\n\n\n  - name?: string\n    \n    约束名称\n    \n  - columns?: string[]\n    \n    约束列（用于复合唯一约束）\n    \n\n### Interface: `LifecycleOptions`\n\n生命周期钩子选项\n\n\n  - async?: boolean\n    \n    是否异步执行\n    \n  - order?: number\n    \n    执行顺序\n    \n\n### Function: `isEntityToken(token: InjectionToken<any>): boolean`\n\n检查给定的令牌是否为实体装饰器令牌\n\n\n### Function: `isColumnToken(token: InjectionToken<any>): boolean`\n\n检查给定的令牌是否为列装饰器令牌\n\n\n### Function: `isRelationToken(token: InjectionToken<any>): boolean`\n\n检查给定的令牌是否为关系装饰器令牌\n\n\n### Function: `isIndexToken(token: InjectionToken<any>): boolean`\n\n检查给定的令牌是否为索引装饰器令牌\n\n\n### Function: `isLifecycleToken(token: InjectionToken<any>): boolean`\n\n检查给定的令牌是否为生命周期装饰器令牌\n\n\n### Function: `createEntity(entityClass: new () => T, options?: EntityOptions): new () => T`\n\n创建实体类的工厂函数\n\n\n### Function: `getTableName(entityClass: new () => T): string`\n\n获取实体的表名\n\n\n### Function: `getEntityColumns(entityClass: new () => T): Array<{\n    propertyName: string;\n    columnName: string;\n    type: ColumnType | string;\n    options: ColumnOptions;\n}>`\n\n获取实体的列信息\n\n\n### Function: `getEntityRelations(entityClass: new () => T): Array<{\n    propertyName: string;\n    type: RelationType;\n    targetEntity: Function;\n    options: BaseRelationOptions;\n}>`\n\n获取实体的关系信息\n\n\n### Function: `getEntityIndexes(entityClass: new () => T): Array<{\n    name?: string;\n    columns: string[];\n    unique?: boolean;\n    options: IndexOptions;\n}>`\n\n获取实体的索引信息\n\n",
    "hash": "c62ee5bd7f92ef072cacdfdacbf173de",
    "category": "entity",
    "tags": [
      "entity",
      "database",
      "column",
      "relationship",
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [
      "```typescript",
      "```typescript\nexport class User {",
      "```typescript\nexport class User {",
      "```typescript\nexport class User {",
      "```typescript\nexport class User {",
      "```typescript\nexport class User {",
      "```typescript\nexport class Post {",
      "```typescript\nexport class User {",
      "```typescript\nexport class User {",
      "```typescript\nexport class User {",
      "```typescript\nexport class User {"
    ],
    "dependencies": [
      "@decopro/core",
      "zod"
    ]
  },
  {
    "package_name": "@decopro/orm",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "",
    "hash": "0d5c3a6d2f4eafc5e455e0e5346b37c6",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/orm",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/__tests__/setup.ts",
    "docs": "",
    "hash": "7c500dd3fa69c047d9c720223d239f89",
    "category": "test",
    "tags": [
      "test"
    ],
    "examples": [
      "// Test: should setup test environment\nexpect(process.env.NODE_ENV).toBe('test');"
    ],
    "dependencies": []
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/database.ts",
    "docs": "### Enum: `DatabaseType`\n\n数据库类型枚举\n\n\n  - Member: `MYSQL`\n  - Member: `POSTGRESQL`\n  - Member: `SQLITE`\n  - Member: `MSSQL`\n  - Member: `ORACLE`\n  - Member: `MONGODB`\n### Interface: `DatabaseConfig`\n\n数据库连接配置\n\n\n  - type: DatabaseType\n    \n    数据库类型\n    \n  - host: string | undefined\n    \n    主机地址\n    \n  - port: number | undefined\n    \n    端口号\n    \n  - database: string\n    \n    数据库名\n    \n  - username: string | undefined\n    \n    用户名\n    \n  - password?: string | undefined\n    \n    密码\n    \n  - pool?: {\n        /** 最小连接数 */\n        min?: number;\n        /** 最大连接数 */\n        max?: number;\n        /** 连接超时时间（毫秒） */\n        acquireTimeoutMillis?: number;\n        /** 空闲超时时间（毫秒） */\n        idleTimeoutMillis?: number;\n        /** 连接创建超时时间（毫秒） */\n        createTimeoutMillis?: number;\n        /** 连接销毁超时时间（毫秒） */\n        destroyTimeoutMillis?: number;\n        /** 连接重用次数 */\n        reapIntervalMillis?: number;\n        /** 创建重试次数 */\n        createRetryIntervalMillis?: number;\n    }\n    \n    连接池配置\n    \n  - ssl?: boolean | {\n        ca?: string;\n        cert?: string;\n        key?: string;\n        rejectUnauthorized?: boolean;\n    }\n    \n    SSL 配置\n    \n  - extra?: Record<string, any>\n    \n    额外选项\n    \n  - logging?: boolean | string[]\n    \n    是否启用日志\n    \n  - synchronize?: boolean\n    \n    是否同步数据库结构\n    \n  - migrationsRun?: boolean\n    \n    是否自动运行迁移\n    \n  - migrations?: string[]\n    \n    迁移文件路径\n    \n  - entities?: string[] | Function[]\n    \n    实体文件路径\n    \n\n### Interface: `QueryResult`\n\n查询结果接口\n\n\n  - rows: T[]\n    \n    查询结果数据\n    \n  - rowCount: number\n    \n    影响的行数\n    \n  - fields?: Array<{\n        name: string;\n        type: string;\n    }>\n    \n    查询字段信息\n    \n  - duration?: number\n    \n    执行时间（毫秒）\n    \n\n### Enum: `IsolationLevel`\n\n事务隔离级别\n\n\n  - Member: `READ_UNCOMMITTED`\n  - Member: `READ_COMMITTED`\n  - Member: `REPEATABLE_READ`\n  - Member: `SERIALIZABLE`\n### Interface: `TransactionOptions`\n\n事务选项\n\n\n  - isolationLevel?: IsolationLevel\n    \n    隔离级别\n    \n  - timeout?: number\n    \n    超时时间（毫秒）\n    \n  - readOnly?: boolean\n    \n    是否只读\n    \n\n### Interface: `IConnection`\n\n数据库连接接口\n\n\n  - id: string\n    \n    连接 ID\n    \n  - isConnected: boolean\n    \n    是否已连接\n    \n  - inTransaction: boolean\n    \n    是否在事务中\n    \n\n### Interface: `IConnectionPool`\n\n连接池接口\n\n\n  - totalConnections: number\n    \n    池中连接总数\n    \n  - idleConnections: number\n    \n    空闲连接数\n    \n  - activeConnections: number\n    \n    活跃连接数\n    \n\n### Interface: `IDatabaseManager`\n\n数据库管理器接口\n\n\n\n### Class: `DatabaseDriverRegistry`\n\n数据库驱动注册器\n\n\n  - Property: `drivers: any`\n  - Method: `register(type: DatabaseType, driverFactory: () => Promise<IDatabaseManager>): void`\n    \n    注册数据库驱动\n    \n  - Method: `create(type: DatabaseType): Promise<IDatabaseManager>`\n    \n    创建数据库管理器\n    \n  - Method: `isSupported(type: DatabaseType): boolean`\n    \n    检查是否支持指定的数据库类型\n    \n  - Method: `getSupportedTypes(): DatabaseType[]`\n    \n    获取支持的数据库类型\n    \n  - Method: `clear(): void`\n    \n    清除所有注册的驱动（主要用于测试）\n    \n\n### Class: `BaseDatabaseManager`\n\n基础数据库管理器实现\n这是一个抽象类，具体的数据库驱动需要继承并实现抽象方法\n\n\n  - Property: `config: DatabaseConfig | undefined`\n  - Property: `connectionPool: IConnectionPool | undefined`\n  - Property: `isInitialized: any`\n  - Method: `initialize(config: DatabaseConfig): Promise<void>`\n    \n    初始化数据库连接\n    \n  - Method: `createConnectionPool(config: DatabaseConfig): Promise<IConnectionPool>`\n    \n    创建连接池（需要子类实现）\n    \n  - Method: `getConnection(): Promise<IConnection>`\n    \n    获取连接\n    \n  - Method: `query(sql: string, parameters?: any[]): Promise<QueryResult<T>>`\n    \n    执行查询\n    \n  - Method: `transaction(callback: (connection: IConnection) => Promise<T>, options?: TransactionOptions): Promise<T>`\n    \n    执行事务\n    \n  - Method: `close(): Promise<void>`\n    \n    关闭数据库连接\n    \n  - Method: `isConnected(): boolean`\n    \n    检查数据库连接状态\n    \n  - Method: `getDatabaseInfo(): Promise<{\n        type: DatabaseType;\n        version: string;\n        name: string;\n    }>`\n    \n    获取数据库信息（需要子类实现）\n    \n\n### Interface: `IMigration`\n\n迁移接口\n\n\n  - name: string\n    \n    迁移名称\n    \n  - timestamp: number\n    \n    迁移时间戳\n    \n\n### Interface: `IMigrationManager`\n\n迁移管理器接口\n\n\n\n### Class: `BaseMigrationManager`\n\n基础迁移管理器实现\n\n\n  - Property: `databaseManager: IDatabaseManager`\n  - Property: `migrations: IMigration[]`\n  - Constructor: `constructor(databaseManager: IDatabaseManager): void`\n    - Parameter: `databaseManager: IDatabaseManager`\n  - Method: `addMigration(migration: IMigration): void`\n    \n    添加迁移\n    \n  - Method: `runMigrations(): Promise<void>`\n    \n    运行所有待执行的迁移\n    \n  - Method: `revertMigrations(count: number): Promise<void>`\n    \n    回滚指定数量的迁移\n    \n  - Method: `getPendingMigrations(): Promise<IMigration[]>`\n    \n    获取待执行的迁移列表\n    \n  - Method: `recordMigration(connection: IConnection, migrationName: string): Promise<void>`\n    \n    记录已执行的迁移（需要子类实现）\n    \n  - Method: `removeMigrationRecord(connection: IConnection, migrationName: string): Promise<void>`\n    \n    删除迁移记录（需要子类实现）\n    \n  - Method: `createMigrationsTable(): Promise<void>`\n    \n    创建迁移表（需要子类实现）\n    \n  - Method: `getExecutedMigrations(): Promise<string[]>`\n    \n    获取已执行的迁移列表（需要子类实现）\n    \n\n### Class: `DatabaseManagerFactory`\n\n数据库管理器工厂\n提供创建和管理数据库连接的统一接口\n\n\n  - Method: `create(config: DatabaseConfig): Promise<IDatabaseManager>`\n    \n    创建数据库管理器\n    \n  - Method: `createAndInitialize(config: DatabaseConfig): Promise<IDatabaseManager>`\n    \n    创建并初始化数据库管理器\n    \n  - Method: `getSupportedTypes(): DatabaseType[]`\n    \n    获取支持的数据库类型\n    \n  - Method: `isSupported(type: DatabaseType): boolean`\n    \n    检查是否支持指定的数据库类型\n    \n\n### Interface: `ORMConfig`\n\nORM 配置接口\n\n\n  - database: DatabaseConfig | string\n    \n    数据库配置\n    \n  - entities: Function[]\n    \n    实体类列表\n    \n  - synchronize?: boolean\n    \n    是否同步数据库结构\n    \n  - logging?: boolean | string[]\n    \n    是否启用日志\n    \n  - migrations?: string[]\n    \n    迁移文件路径\n    \n  - migrationsRun?: boolean\n    \n    是否自动运行迁移\n    \n\n### Function: `parseDatabaseConfig(config: DatabaseConfig | string): DatabaseConfig`\n\n解析数据库配置\n\n",
    "hash": "2e470fe6a81a12b5e61537ea946f48b3",
    "category": "orm",
    "tags": [
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Function: `registerAllDrivers(): void`\n\n注册所有内置驱动\n\n\n### Function: `registerSQLiteDriver(): void`\n\n注册 SQLite 驱动\n\n\n### Function: `registerMySQLDriver(): void`\n\n注册 MySQL 驱动\n\n\n### Function: `registerPostgreSQLDriver(): void`\n\n注册 PostgreSQL 驱动（占位符）\n\n\n### Function: `isDriverAvailable(type: DatabaseType): boolean`\n\n检查驱动是否可用\n\n\n### Function: `getAvailableDrivers(): DatabaseType[]`\n\n获取所有可用的驱动类型\n\n\n### Function: `createDatabaseManager(type: DatabaseType): Promise<IDatabaseManager>`\n\n创建数据库管理器（便捷函数）\n\n",
    "hash": "7824eff8a4a478a43d0f5b0c6e695f53",
    "category": "module",
    "tags": [
      "async",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/mysql.ts",
    "docs": "### Class: `MySQLConnection`\n\nMySQL 连接实现\n\n\n  - Property: `id: string`\n    \n    连接 ID\n    \n  - Property: `isConnected: boolean`\n    \n    是否已连接\n    \n  - Property: `inTransaction: boolean`\n    \n    是否在事务中\n    \n  - Property: `connection: any`\n  - Property: `startTime: number`\n  - Constructor: `constructor(connection: any): void`\n    - Parameter: `connection: any`\n  - Method: `query(sql: string, parameters?: any[]): Promise<QueryResult<T>>`\n    \n    执行查询\n    \n  - Method: `beginTransaction(options?: TransactionOptions): Promise<void>`\n    \n    开始事务\n    \n  - Method: `commit(): Promise<void>`\n    \n    提交事务\n    \n  - Method: `rollback(): Promise<void>`\n    \n    回滚事务\n    \n  - Method: `release(): Promise<void>`\n    \n    释放连接\n    \n  - Method: `close(): Promise<void>`\n    \n    关闭连接\n    \n\n### Class: `MySQLConnectionPool`\n\nMySQL 连接池实现\n\n\n  - Property: `totalConnections: number`\n    \n    池中连接总数\n    \n  - Property: `idleConnections: number`\n    \n    空闲连接数\n    \n  - Property: `activeConnections: number`\n    \n    活跃连接数\n    \n  - Property: `pool: any`\n  - Property: `config: DatabaseConfig`\n  - Constructor: `constructor(pool: any, config: DatabaseConfig): void`\n    - Parameter: `pool: any`\n    - Parameter: `config: DatabaseConfig`\n  - Method: `getConnection(): Promise<IConnection>`\n    \n    获取连接\n    \n  - Method: `releaseConnection(connection: IConnection): Promise<void>`\n    \n    释放连接\n    \n  - Method: `close(): Promise<void>`\n    \n    关闭连接池\n    \n  - Method: `healthCheck(): Promise<boolean>`\n    \n    健康检查\n    \n\n### Class: `MySQLDatabaseManager`\n\nMySQL 数据库管理器\n\n\n  - Property: `pool: any`\n  - Method: `createConnectionPool(config: DatabaseConfig): Promise<IConnectionPool>`\n    \n    创建连接池\n    \n  - Method: `getDatabaseInfo(): Promise<{ type: DatabaseType; version: string; name: string }>`\n    \n    获取数据库信息\n    \n",
    "hash": "dcca4d65e43d73f82eb4e5f3c5bdd6d9",
    "category": "class",
    "tags": [
      "async",
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "mysql2"
    ]
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/orm-manager.ts",
    "docs": "### Interface: `ORMManagerConfig`\n\nORM 管理器配置选项\n\n\n  - database: DatabaseConfig | string\n    \n    数据库配置\n    \n  - entities?: Function[]\n    \n    实体类列表\n    \n  - synchronize?: boolean\n    \n    是否自动同步数据库结构\n    \n  - migrationsRun?: boolean\n    \n    是否自动运行迁移\n    \n  - migrations?: string[]\n    \n    迁移文件路径\n    \n  - logging?: boolean\n    \n    是否启用日志\n    \n  - logLevel?: 'error' | 'warn' | 'info' | 'debug'\n    \n    日志级别\n    \n\n### Class: `ORMManager`\n\nORM 管理器\n负责管理数据库连接、实体注册、仓储创建等\n\n\n  - Property: `databaseManager: IDatabaseManager`\n  - Property: `migrationManager: IMigrationManager`\n  - Property: `config: ORMManagerConfig`\n  - Property: `repositories: any`\n  - Property: `entities: any`\n  - Property: `isInitialized: any`\n  - Method: `initialize(config: ORMManagerConfig): Promise<void>`\n    \n    初始化 ORM\n    \n  - Method: `registerEntity(entityClass: Function): void`\n    \n    注册实体\n    \n  - Method: `hasEntity(entityClass: Function): boolean`\n    \n    检查是否已注册实体\n    \n  - Method: `getEntityClasses(): Function[]`\n    \n    获取所有已注册的实体类\n    \n  - Method: `getRepository(entityClass: new () => T): BaseRepository<T, ID>`\n    \n    获取仓储\n    \n  - Method: `getDatabaseManager(): IDatabaseManager`\n    \n    获取数据库管理器\n    \n  - Method: `getMigrationManager(): IMigrationManager | undefined`\n    \n    获取迁移管理器\n    \n  - Method: `transaction(callback: (manager: ORMManager) => Promise<T>): Promise<T>`\n    \n    执行事务\n    \n  - Method: `synchronize(): Promise<void>`\n    \n    同步数据库结构\n    \n  - Method: `close(): Promise<void>`\n    \n    关闭 ORM\n    \n  - Method: `getDatabaseInfo(): void`\n    \n    获取数据库信息\n    \n  - Method: `isConnected(): boolean`\n    \n    检查连接状态\n    \n  - Method: `getRegisteredEntities(): Function[]`\n    \n    获取已注册的实体列表\n    \n  - Method: `getRepositories(): Map<Function, BaseRepository<any, any>>`\n    \n    获取已创建的仓储列表\n    \n\n### Function: `createORM(config: ORMManagerConfig): Promise<ORMManager>`\n\n创建 ORM 实例\n\n\n### Function: `createTestORM(entities?: Function[]): Promise<ORMManager>`\n\n创建测试 ORM（使用模拟驱动）\n\n\n### Function: `InjectRepository(entityClass: new () => T): void`\n\n自动注入仓储的装饰器\n\n\n### Function: `Transactional(): void`\n\n事务装饰器\n\n\n### Function: `setGlobalORM(orm: ORMManager): void`\n\n设置全局 ORM 实例\n\n\n### Function: `getGlobalORM(): ORMManager`\n\n获取全局 ORM 实例\n\n\n### Function: `getRepository(entityClass: new () => T): BaseRepository<T, ID>`\n\n获取全局仓储\n\n",
    "hash": "67dc2809bfeebbee498f2508d0c3f8df",
    "category": "orm",
    "tags": [
      "orm",
      "repository",
      "database",
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/query-builder.ts",
    "docs": "### Enum: `QueryOperator`\n\n查询操作符\n\n\n  - Member: `EQUAL`\n  - Member: `NOT_EQUAL`\n  - Member: `GREATER_THAN`\n  - Member: `GREATER_THAN_OR_EQUAL`\n  - Member: `LESS_THAN`\n  - Member: `LESS_THAN_OR_EQUAL`\n  - Member: `LIKE`\n  - Member: `ILIKE`\n  - Member: `IN`\n  - Member: `NOT_IN`\n  - Member: `IS_NULL`\n  - Member: `IS_NOT_NULL`\n  - Member: `BETWEEN`\n  - Member: `NOT_BETWEEN`\n### Enum: `SortDirection`\n\n排序方向\n\n\n  - Member: `ASC`\n  - Member: `DESC`\n### Enum: `JoinType`\n\n连接类型\n\n\n  - Member: `INNER`\n  - Member: `LEFT`\n  - Member: `RIGHT`\n  - Member: `FULL`\n### Enum: `AggregateFunction`\n\n聚合函数类型\n\n\n  - Member: `COUNT`\n  - Member: `SUM`\n  - Member: `AVG`\n  - Member: `MIN`\n  - Member: `MAX`\n### Interface: `WhereCondition`\n\n查询条件接口\n\n\n  - field: string\n  - operator: QueryOperator\n  - value?: any\n  - values?: any[]\n\n### Interface: `OrderByCondition`\n\n排序条件接口\n\n\n  - field: string\n  - direction: SortDirection\n\n### Interface: `JoinCondition`\n\n连接条件接口\n\n\n  - type: JoinType\n  - table: string\n  - alias?: string\n  - on: string\n\n### Interface: `GroupByCondition`\n\n分组条件接口\n\n\n  - field: string\n\n### Interface: `HavingCondition`\n\nHaving 条件接口\n\n\n  - field: string\n  - operator: QueryOperator\n  - value: any\n\n### Interface: `QueryOptions`\n\n查询选项接口\n\n\n  - select?: string[]\n    \n    查询字段\n    \n  - from?: string\n    \n    表名\n    \n  - alias?: string\n    \n    表别名\n    \n  - where?: WhereCondition[]\n    \n    WHERE 条件\n    \n  - joins?: JoinCondition[]\n    \n    JOIN 条件\n    \n  - orderBy?: OrderByCondition[]\n    \n    ORDER BY 条件\n    \n  - groupBy?: GroupByCondition[]\n    \n    GROUP BY 条件\n    \n  - having?: HavingCondition[]\n    \n    HAVING 条件\n    \n  - limit?: number\n    \n    限制条数\n    \n  - offset?: number\n    \n    偏移量\n    \n  - distinct?: boolean\n    \n    是否去重\n    \n\n### Class: `QueryBuilder`\n\n类型安全的查询构建器\n\n\n  - Property: `options: QueryOptions`\n  - Property: `entityClass: new () => T`\n  - Property: `databaseManager: IDatabaseManager`\n  - Constructor: `constructor(entityClass?: new () => T, alias?: string, databaseManager?: IDatabaseManager): void`\n    - Parameter: `entityClass: new () => T`\n    - Parameter: `alias: string`\n    - Parameter: `databaseManager: IDatabaseManager`\n  - Method: `select(fields: (keyof T | string)[]): this`\n    \n    选择字段\n    \n  - Method: `selectAll(): this`\n    \n    选择所有字段\n    \n  - Method: `from(table: string, alias?: string): this`\n    \n    设置表名\n    \n  - Method: `where(field: keyof T | string, operator: QueryOperator, value?: any): this`\n    \n    添加 WHERE 条件\n    \n  - Method: `whereEqual(field: keyof T | string, value: any): this`\n    \n    添加 WHERE 等于条件\n    \n  - Method: `whereNotEqual(field: keyof T | string, value: any): this`\n    \n    添加 WHERE 不等于条件\n    \n  - Method: `whereLike(field: keyof T | string, pattern: string): this`\n    \n    添加 WHERE LIKE 条件\n    \n  - Method: `whereIn(field: keyof T | string, values: any[]): this`\n    \n    添加 WHERE IN 条件\n    \n  - Method: `whereNull(field: keyof T | string): this`\n    \n    添加 WHERE IS NULL 条件\n    \n  - Method: `whereNotNull(field: keyof T | string): this`\n    \n    添加 WHERE IS NOT NULL 条件\n    \n  - Method: `whereBetween(field: keyof T | string, min: any, max: any): this`\n    \n    添加 WHERE BETWEEN 条件\n    \n  - Method: `join(table: string, on: string, type: JoinType, alias?: string): this`\n    \n    添加 JOIN 条件\n    \n  - Method: `innerJoin(table: string, on: string, alias?: string): this`\n    \n    添加 INNER JOIN\n    \n  - Method: `leftJoin(table: string, on: string, alias?: string): this`\n    \n    添加 LEFT JOIN\n    \n  - Method: `rightJoin(table: string, on: string, alias?: string): this`\n    \n    添加 RIGHT JOIN\n    \n  - Method: `orderBy(field: keyof T | string, direction: SortDirection): this`\n    \n    添加 ORDER BY 条件\n    \n  - Method: `orderByAsc(field: keyof T | string): this`\n    \n    添加升序排序\n    \n  - Method: `orderByDesc(field: keyof T | string): this`\n    \n    添加降序排序\n    \n  - Method: `groupBy(fields: (keyof T | string)[]): this`\n    \n    添加 GROUP BY 条件\n    \n  - Method: `having(field: string, operator: QueryOperator, value: any): this`\n    \n    添加 HAVING 条件\n    \n  - Method: `limit(count: number): this`\n    \n    设置限制条数\n    \n  - Method: `offset(count: number): this`\n    \n    设置偏移量\n    \n  - Method: `paginate(page: number, pageSize: number): this`\n    \n    设置分页\n    \n  - Method: `distinct(): this`\n    \n    设置去重\n    \n  - Method: `getOptions(): QueryOptions`\n    \n    获取查询选项\n    \n  - Method: `toSQL(): string`\n    \n    构建 SQL 查询语句（基础实现）\n    \n  - Method: `toParameterizedSQL(): { sql: string; parameters: any[] }`\n    \n    构建参数化 SQL 查询语句\n    \n  - Method: `clone(): QueryBuilder<T>`\n    \n    克隆查询构建器\n    \n  - Method: `setDatabaseManager(databaseManager: IDatabaseManager): this`\n    \n    设置数据库管理器\n    \n  - Method: `getOne(): Promise<T | null>`\n    \n    执行查询并获取单个结果\n    \n  - Method: `getCount(): Promise<number>`\n    \n    执行查询并获取结果数量\n    \n  - Method: `getMany(): Promise<T[]>`\n    \n    执行查询并获取多个结果\n    \n\n### Function: `createQueryBuilder(entityClass?: new () => T, alias?: string, databaseManager?: IDatabaseManager): QueryBuilder<T>`\n\n创建查询构建器\n\n",
    "hash": "e96bcd7d00593f7ee568b3bff0e14e34",
    "category": "interface",
    "tags": [
      "query-builder",
      "database",
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/repository.ts",
    "docs": "### Interface: `FindOptions`\n\n查找选项\n\n\n  - where?: Partial<T> | ((qb: QueryBuilder<T>) => QueryBuilder<T>)\n    \n    查询条件\n    \n  - select?: (keyof T)[]\n    \n    选择字段\n    \n  - relations?: string[]\n    \n    关联查询\n    \n  - order?: { [P in keyof T]?: \"ASC\" | \"DESC\" }\n    \n    排序\n    \n  - skip?: number\n    \n    跳过条数\n    \n  - take?: number\n    \n    限制条数\n    \n  - cache?: boolean | number\n    \n    缓存\n    \n\n### Interface: `FindOneOptions`\n\n查找一个选项\n\n\n\n### Interface: `SaveOptions`\n\n保存选项\n\n\n  - validate?: boolean\n    \n    数据验证\n    \n  - reload?: boolean\n    \n    重新加载保存后的实体\n    \n  - transaction?: any\n    \n    事务\n    \n\n### Interface: `DeleteOptions`\n\n删除选项\n\n\n  - soft?: boolean\n    \n    软删除\n    \n  - transaction?: any\n    \n    事务\n    \n\n### Interface: `PaginationResult`\n\n分页结果\n\n\n  - data: T[]\n    \n    数据列表\n    \n  - total: number\n    \n    总数\n    \n  - page: number\n    \n    当前页\n    \n  - pageSize: number\n    \n    每页条数\n    \n  - totalPages: number\n    \n    总页数\n    \n  - hasNext: boolean\n    \n    是否有下一页\n    \n  - hasPrev: boolean\n    \n    是否有上一页\n    \n\n### Interface: `AggregateResult`\n\n聚合结果\n\n\n  - count?: number\n  - sum?: number\n  - avg?: number\n  - min?: number\n  - max?: number\n\n### Interface: `IRepository`\n\n基础仓储接口\n\n\n\n### Class: `BaseRepository`\n\n基础仓储实现\n\n\n  - Property: `entityClass: new () => T`\n  - Property: `tableName: string`\n  - Property: `mockData: Map<ID, T>`\n  - Property: `databaseManager: IDatabaseManager`\n  - Constructor: `constructor(entityClass: new () => T, databaseManager?: IDatabaseManager): void`\n    - Parameter: `entityClass: new () => T`\n    - Parameter: `databaseManager: IDatabaseManager`\n  - Method: `getTableName(): string`\n    \n    获取表名（需要从装饰器元数据中获取）\n    \n  - Method: `createQueryBuilder(alias?: string): QueryBuilder<T>`\n    \n    创建查询构建器\n    \n  - Method: `save(entity: Partial<T>, options?: SaveOptions): Promise<T>`\n    \n    保存实体\n    \n  - Method: `saveMany(entities: Partial<T>[], options?: SaveOptions): Promise<T[]>`\n    \n    批量保存实体\n    \n  - Method: `findById(id: ID, options?: FindOneOptions<T>): Promise<T | null>`\n    \n    根据 ID 查找实体\n    \n  - Method: `findOne(options?: FindOneOptions<T>): Promise<T | null>`\n    \n    查找一个实体\n    \n  - Method: `find(options?: FindOptions<T>): Promise<T[]>`\n    \n    查找多个实体\n    \n  - Method: `findAll(options?: FindOptions<T>): Promise<T[]>`\n    \n    查找所有实体\n    \n  - Method: `findAndCount(options?: FindOptions<T>): Promise<PaginationResult<T>>`\n    \n    分页查找\n    \n  - Method: `count(options?: FindOptions<T>): Promise<number>`\n    \n    统计数量\n    \n  - Method: `exists(options?: FindOneOptions<T>): Promise<boolean>`\n    \n    检查是否存在\n    \n  - Method: `update(id: ID, updateData: Partial<T>, options?: SaveOptions): Promise<T | null>`\n    \n    更新实体\n    \n  - Method: `updateMany(where: Partial<T>, updateData: Partial<T>, options?: SaveOptions): Promise<number>`\n    \n    批量更新\n    \n  - Method: `delete(id: ID, options?: DeleteOptions): Promise<boolean>`\n    \n    删除实体\n    \n  - Method: `remove(entity: T): Promise<boolean>`\n    \n    删除实体对象\n    \n  - Method: `deleteMany(where: Partial<T>, options?: DeleteOptions): Promise<number>`\n    \n    批量删除\n    \n  - Method: `softDelete(id: ID): Promise<boolean>`\n    \n    软删除\n    \n  - Method: `restore(id: ID): Promise<boolean>`\n    \n    恢复软删除\n    \n  - Method: `query(sql: string, parameters?: any[]): Promise<any>`\n    \n    执行原生查询\n    \n  - Method: `aggregate(options: {\n        count?: boolean;\n        sum?: keyof T;\n        avg?: keyof T;\n        min?: keyof T;\n        max?: keyof T;\n        where?: Partial<T>;\n    }): Promise<AggregateResult>`\n    \n    聚合查询\n    \n\n### Function: `createRepository(entityClass: new () => T, databaseManager?: IDatabaseManager): BaseRepository<T, ID>`\n\n创建仓储实例\n\n",
    "hash": "02b08dabf20747b025e28e0d3e2a4e76",
    "category": "interface",
    "tags": [
      "query-builder",
      "database",
      "repository",
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/orm"
    ]
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/sqlite.ts",
    "docs": "### Class: `SQLiteConnection`\n\nSQLite 连接实现\n\n\n  - Property: `id: string`\n    \n    连接 ID\n    \n  - Property: `isConnected: boolean`\n    \n    是否已连接\n    \n  - Property: `inTransaction: boolean`\n    \n    是否在事务中\n    \n  - Property: `db: any`\n  - Property: `startTime: number`\n  - Constructor: `constructor(db: any): void`\n    - Parameter: `db: any`\n  - Method: `query(sql: string, parameters?: any[]): Promise<QueryResult<T>>`\n    \n    执行查询\n    \n  - Method: `beginTransaction(options?: TransactionOptions): Promise<void>`\n    \n    开始事务\n    \n  - Method: `commit(): Promise<void>`\n    \n    提交事务\n    \n  - Method: `rollback(): Promise<void>`\n    \n    回滚事务\n    \n  - Method: `release(): Promise<void>`\n    \n    释放连接\n    \n  - Method: `close(): Promise<void>`\n    \n    关闭连接\n    \n\n### Class: `SQLiteConnectionPool`\n\nSQLite 连接池实现\n\n\n  - Property: `totalConnections: number`\n    \n    池中连接总数\n    \n  - Property: `idleConnections: number`\n    \n    空闲连接数\n    \n  - Property: `activeConnections: number`\n    \n    活跃连接数\n    \n  - Property: `db: any`\n  - Property: `config: DatabaseConfig`\n  - Property: `connections: SQLiteConnection[]`\n  - Property: `maxConnections: number`\n  - Constructor: `constructor(db: any, config: DatabaseConfig): void`\n    - Parameter: `db: any`\n    - Parameter: `config: DatabaseConfig`\n  - Method: `getConnection(): Promise<IConnection>`\n    \n    获取连接\n    \n  - Method: `releaseConnection(connection: IConnection): Promise<void>`\n    \n    释放连接\n    \n  - Method: `close(): Promise<void>`\n    \n    关闭连接池\n    \n  - Method: `healthCheck(): Promise<boolean>`\n    \n    健康检查\n    \n\n### Class: `SQLiteDatabaseManager`\n\nSQLite 数据库管理器\n\n\n  - Property: `db: any`\n  - Method: `createConnectionPool(config: DatabaseConfig): Promise<IConnectionPool>`\n    \n    创建连接池\n    \n  - Method: `getDatabaseInfo(): Promise<{ type: DatabaseType; version: string; name: string }>`\n    \n    获取数据库信息\n    \n",
    "hash": "7a7f9779572999ce90e5f084015a53df",
    "category": "class",
    "tags": [
      "async",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "sqlite3"
    ]
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "src/test-utils.ts",
    "docs": "### Class: `MockConnection`\n\n模拟数据库连接\n\n\n  - Property: `id: string`\n    \n    连接 ID\n    \n  - Property: `isConnected: boolean`\n    \n    是否已连接\n    \n  - Property: `inTransaction: boolean`\n    \n    是否在事务中\n    \n  - Constructor: `constructor(): void`\n  - Method: `query(sql: string, parameters?: any[]): Promise<QueryResult<T>>`\n    \n    执行查询\n    \n  - Method: `beginTransaction(options?: TransactionOptions): Promise<void>`\n    \n    开始事务\n    \n  - Method: `commit(): Promise<void>`\n    \n    提交事务\n    \n  - Method: `rollback(): Promise<void>`\n    \n    回滚事务\n    \n  - Method: `release(): Promise<void>`\n    \n    释放连接\n    \n  - Method: `close(): Promise<void>`\n    \n    关闭连接\n    \n\n### Class: `MockConnectionPool`\n\n模拟连接池\n\n\n  - Property: `totalConnections: number`\n    \n    池中连接总数\n    \n  - Property: `idleConnections: number`\n    \n    空闲连接数\n    \n  - Property: `activeConnections: number`\n    \n    活跃连接数\n    \n  - Property: `config: DatabaseConfig`\n  - Constructor: `constructor(config: DatabaseConfig): void`\n    - Parameter: `config: DatabaseConfig`\n  - Method: `getConnection(): Promise<IConnection>`\n    \n    获取连接\n    \n  - Method: `releaseConnection(connection: IConnection): Promise<void>`\n    \n    释放连接\n    \n  - Method: `close(): Promise<void>`\n    \n    关闭连接池\n    \n  - Method: `healthCheck(): Promise<boolean>`\n    \n    检查连接池健康状态\n    \n\n### Class: `MockDatabaseManager`\n\n模拟数据库管理器\n\n\n  - Method: `createConnectionPool(config: DatabaseConfig): Promise<IConnectionPool>`\n    \n    创建连接池（需要子类实现）\n    \n  - Method: `getDatabaseInfo(): Promise<{ type: DatabaseType; version: string; name: string }>`\n    \n    获取数据库信息（需要子类实现）\n    \n\n### Function: `registerMockDrivers(): void`\n\n注册模拟驱动（用于测试）\n\n\n### Function: `clearAllDrivers(): void`\n\n清除所有注册的驱动（用于测试）\n\n\n### Function: `createTestDatabaseConfig(type: DatabaseType): DatabaseConfig`\n\n创建测试数据库配置\n\n\n### Function: `isTestEnvironment(): boolean`\n\n检查是否在测试环境中\n\n\n### Function: `autoRegisterMockDriversInTest(): void`\n\n自动注册模拟驱动（仅在测试环境中）\n\n",
    "hash": "c084ba24a8092b7b8252881e4c1bba42",
    "category": "utility",
    "tags": [
      "test",
      "async",
      "class",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": []
  },
  {
    "package_name": "@decopro/orm-drivers",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "3994d5fc200f4eeddb11fb6ecf754ea9",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/platform-axios",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Class: `PlatformAxios`\n",
    "hash": "c9bd2f1146bae1b3b4f4c6af15cdd32c",
    "category": "class",
    "tags": [
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/platform-axios",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/platform-node",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Class: `PlatformNode`\n",
    "hash": "e3cd2574b12508ea7359bf2d36c57764",
    "category": "class",
    "tags": [
      "class",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/platform-node",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "44eca3883d0d48802e16df371d61a3bb",
    "category": "module",
    "tags": [
      "async",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/rest",
    "package_version": "1.1.0",
    "filename": "src/__tests__/decorators.test.ts",
    "docs": "",
    "hash": "4b2e0d4b24699a0d06aeb64b57b90592",
    "category": "test",
    "tags": [
      "test",
      "controller",
      "api",
      "class",
      "function"
    ],
    "examples": [
      "// Test: should return false for non-HTTP method tokens\nexpect(isHttpMethodToken(BODY_TOKEN)).toBe(false);\n                expect(isHttpMethodToken(QUERY_TOKEN)).toBe(false);\n                expect(isHttpMethodToken(PARAM_TOKEN)).toBe(false);\n                expect(isHttpMethodToken(HEADER_TOKEN)).toBe(false);\n                expect(isHttpMethodToken(CONTROLLER_TOKEN)).toBe(false);",
      "// Test: should return true for parameter tokens\nexpect(isParameterToken(BODY_TOKEN)).toBe(true);\n                expect(isParameterToken(QUERY_TOKEN)).toBe(true);\n                expect(isParameterToken(PARAM_TOKEN)).toBe(true);\n                expect(isParameterToken(HEADER_TOKEN)).toBe(true);",
      "// Test: should return false for non-parameter tokens\nexpect(isParameterToken(GET_TOKEN)).toBe(false);\n                expect(isParameterToken(POST_TOKEN)).toBe(false);\n                expect(isParameterToken(CONTROLLER_TOKEN)).toBe(false);",
      "// Test: should have correct status codes\nexpect(HttpStatus.OK).toBe(200);\n                expect(HttpStatus.CREATED).toBe(201);\n                expect(HttpStatus.BAD_REQUEST).toBe(400);\n                expect(HttpStatus.UNAUTHORIZED).toBe(401);\n                expect(HttpStatus.NOT_FOUND).toBe(404);\n                expect(HttpStatus.INTERNAL_SERVER_ERROR).toBe(500);",
      "// Test: should have correct method values\nexpect(HttpMethod.GET).toBe(\"GET\");\n                expect(HttpMethod.POST).toBe(\"POST\");\n                expect(HttpMethod.PUT).toBe(\"PUT\");\n                expect(HttpMethod.DELETE).toBe(\"DELETE\");\n                expect(HttpMethod.PATCH).toBe(\"PATCH\");\n                expect(HttpMethod.HEAD).toBe(\"HEAD\");\n                expect(HttpMethod.OPTIONS).toBe(\"OPTIONS\");"
    ],
    "dependencies": []
  },
  {
    "package_name": "@decopro/rest",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Interface: `BodyOptions`\n\nHTTP 请求体参数选项\n\n\n  - key?: string\n    \n    参数键名，如果不指定则使用参数名\n    \n  - zod?: ZodTypeAny\n    \n    Zod 验证模式\n    \n\n### Interface: `QueryOptions`\n\nHTTP 查询参数选项\n\n\n  - key?: string\n    \n    参数键名，如果不指定则使用参数名\n    \n  - zod?: ZodTypeAny\n    \n    Zod 验证模式\n    \n\n### Interface: `ParamOptions`\n\nHTTP 路径参数选项\n\n\n  - key?: string\n    \n    参数键名，如果不指定则使用参数名\n    \n  - zod?: ZodTypeAny\n    \n    Zod 验证模式\n    \n\n### Interface: `HeaderOptions`\n\nHTTP 请求头参数选项\n\n\n  - key?: string\n    \n    参数键名，如果不指定则使用参数名\n    \n  - zod?: ZodTypeAny\n    \n    Zod 验证模式\n    \n\n### Interface: `ControllerOptions`\n\n控制器选项\n\n\n  - path?: string\n    \n    控制器的基础路径\n    \n\n### Interface: `HttpRouteOptions`\n\nHTTP 路由选项的基础接口\n\n\n  - path?: string\n    \n    路由路径\n    \n\n### Interface: `GetOptions`\n\nGET 请求选项\n\n\n\n### Interface: `PostOptions`\n\nPOST 请求选项\n\n\n\n### Interface: `PutOptions`\n\nPUT 请求选项\n\n\n\n### Interface: `DeleteOptions`\n\nDELETE 请求选项\n\n\n\n### Interface: `SseOptions`\n\nServer-Sent Events 选项\n\n\n\n### Interface: `PatchOptions`\n\nPATCH 请求选项\n\n\n\n### Interface: `HeadOptions`\n\nHEAD 请求选项\n\n\n\n### Interface: `OptionsOptions`\n\nOPTIONS 请求选项\n\n\n\n### Enum: `HttpMethod`\n\nHTTP 方法枚举\n\n\n  - Member: `GET`\n  - Member: `POST`\n  - Member: `PUT`\n  - Member: `DELETE`\n  - Member: `PATCH`\n  - Member: `HEAD`\n  - Member: `OPTIONS`\n### Type Alias: `HttpStatusCode = typeof HttpStatus[keyof typeof HttpStatus]`\n\nHTTP 状态码类型\n\n\n### Function: `isHttpMethodToken(token: InjectionToken<any>): boolean`\n\n检查给定的令牌是否为 HTTP 方法装饰器令牌\n\n\n### Function: `isParameterToken(token: InjectionToken<any>): boolean`\n\n检查给定的令牌是否为参数装饰器令牌\n\n\n### Function: `getHttpMethodToken(method: HttpMethod): InjectionToken<MethodMetadata<HttpRouteOptions>> | undefined`\n\n根据 HTTP 方法获取对应的装饰器令牌\n\n",
    "hash": "17c9acb46d8c795365d821df2bac846b",
    "category": "controller",
    "tags": [
      "controller",
      "api",
      "async",
      "interface",
      "types",
      "class",
      "function",
      "export"
    ],
    "examples": [
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript",
      "```typescript"
    ],
    "dependencies": [
      "@decopro/core",
      "zod"
    ]
  },
  {
    "package_name": "@decopro/rest",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  },
  {
    "package_name": "@decopro/test",
    "package_version": "1.1.0",
    "filename": "src/index.ts",
    "docs": "### Interface: `TestOptions`\n  - description?: string\n\n### Function: `runTest(injector: Injector): void`",
    "hash": "fd3dfa5ce5ed740ec31bd5a0cc01c92a",
    "category": "interface",
    "tags": [
      "async",
      "interface",
      "types",
      "function",
      "export"
    ],
    "examples": [],
    "dependencies": [
      "@decopro/core"
    ]
  },
  {
    "package_name": "@decopro/test",
    "package_version": "1.1.0",
    "filename": "tsup.config.ts",
    "docs": "",
    "hash": "d3ee429b7f74571866c844b3d566772f",
    "category": "module",
    "tags": [
      "export"
    ],
    "examples": [],
    "dependencies": [
      "tsup"
    ]
  }
]